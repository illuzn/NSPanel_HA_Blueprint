{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NSPanel Custom with HA Blueprint","text":"<p>This innovative solution is designed to revolutionize how you interact with your Sonoff NSPanel. Our goal? To make the customization of your NSPanel seamless, intuitive, and completely code-free!</p> <p>Are you happy with our version for NSPanel? Please consider supporting us with a donation.</p> <p></p> <p></p>"},{"location":"#project-highlights","title":"\ud83c\udf1f Project Highlights","text":"<ul> <li>No Coding Required: Customize your NSPanel without touching a single line of code. It's all about intuitive, user-friendly experiences!</li> <li>Quick Setup: Get your NSPanel up and running in minutes with our easy-to-follow graphical interface.</li> <li>Local Control: Embrace full local control of your NSPanel, steering clear of cloud dependencies.</li> <li>Community-Driven: A project for the users, by the users. Your contributions shape the future of this project!</li> </ul>"},{"location":"#documentation-resources","title":"\ud83d\udcda Documentation &amp; Resources","text":"<ul> <li>Getting Started: Dive into our comprehensive Documentation and Setup Guide for detailed instructions.</li> <li>Video Tutorial: Prefer visual learning? Check out our Step-by-Step Setup Video.</li> <li>Troubleshooting: Encounter an issue? Here's how to report it: WIKI HowTo.</li> <li>Feature Requests: Got ideas? Share them here.</li> <li>What's Next?: Discover what's next and what we are working on right now in our Milestones</li> </ul>"},{"location":"#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Easy to use and simple configuration via Blueprint - no change in the code is necessary</li> <li>32 buttons on 4 button pages with long press function for settings (more buttons are also possible)</li> <li>Button design is automatically generated based on the selected entity</li> <li>Buttons show current brightness and cover position in the button itself</li> <li>Buttons label can be assigned via blueprint</li> <li>Weather + 5 days weather forecast</li> <li>Thermostat + Touch + Relay control for floor heating</li> <li>Light control (brightness, color and temperature) - via long Press</li> <li>Cover control (open, close and position) - via long press</li> <li>Settings page (display brightness, display dim brightness, sleep mode, reboot NSPanel)</li> <li>Swipe between pages</li> <li>Top menu with 10 icons for specific states</li> <li>Heating control (hot water)</li> <li>Modern design - design easy to change via Adobe Express (free + design template)</li> <li>2 physical switches with optional fallback mode</li> <li>and much more ;)</li> </ul>"},{"location":"#pages-overview","title":"\ud83d\udcd6 Pages Overview","text":""},{"location":"#home","title":"Home","text":"<ul> <li>Current weather with button to Weather Forcast page</li> <li>Hardware buttons can be freely assigned</li> <li>Hardware button label (optional)</li> <li>Blue line indicates the entity's states (<code>on</code> or <code>off</code>)</li> <li>Outside temperature</li> <li>Status icons at the top</li> <li>Room temperature with button to thermostat page</li> <li>Room humidity</li> <li>Up to 3 user's selectable entities</li> </ul>"},{"location":"#buttons-pages","title":"Buttons Pages","text":"<ul> <li>Up to 8 buttons per page, across 4 different pages, totaling 32 buttons</li> <li>Button design is automatically generated based on the selected entity</li> <li>Buttons display current brightness and cover position directly on the button</li> <li>Button labels can be assigned via blueprint</li> <li>All buttons feature a long-press function</li> <li>Automatic detection of light, cover, fan, media player, alarm or climate entities for submenus through long press</li> <li>Swipe between all pages</li> <li>Swipe up and down for quick access to specific pages</li> </ul>"},{"location":"#entities-pages","title":"Entities Pages","text":"<ul> <li>Up to 8 entities per page, across 4 different pages, totaling 32 entities</li> <li>Icons and labels can be individually configured via blueprint or automatically detected for each entity</li> <li>Flexible alignment options for values as per user preference</li> </ul>"},{"location":"#light-settings","title":"Light Settings","text":"<ul> <li>Light current state</li> <li>Brightness slider</li> <li>RGB color wheel</li> <li>Color temperature slider</li> <li>Jump back to the right button page</li> </ul>"},{"location":"#cover-settings","title":"Cover Settings","text":"<ul> <li>Open and close cover</li> <li>Cover position via slider</li> <li>Cover battery value (when available)</li> <li>jump back to the right button page</li> </ul>"},{"location":"#thermostat-climate","title":"Thermostat / Climate","text":"<ul> <li>Target temperature control slider</li> <li>Current temperature</li> <li>4 user's selectable values (for water and external temperatures, etc.)</li> <li>All the standard climate controls from Home Assistant (<code>heat</code>, <code>fan</code>, <code>cool</code>, <code>auto</code>, <code>dry</code>)</li> <li>2 user's selectable buttons</li> <li>Can be used for local control (even when Wi-Fi is unavailable) when your panel's relays are used to control your cooler/heater</li> </ul>"},{"location":"#fan-speed","title":"Fan speed","text":"<ul> <li>Turn-on and turn-off fan</li> <li>Set speed via slider or buttons</li> <li>jump back to the right button page</li> </ul>"},{"location":"#alarm","title":"Alarm","text":"<ul> <li>Arm/disarm an alarm (standard modes supported by Home Assistant)</li> <li>Support to numeric pin for arming or disarming</li> </ul>"},{"location":"#weather-forecast","title":"Weather Forecast","text":"<ul> <li>5 days weather forecast via swipe (supports most used weather integrations)</li> <li>Min and max outside temperatures</li> <li>Date</li> <li>Other weather parameters (when provided by your integration):</li> <li>Rain probability</li> <li>Sunshine hours</li> <li>UV index</li> <li>Thunderstorm probability</li> <li>Wind speed</li> </ul>"},{"location":"#display-settings","title":"Display Settings","text":"<ul> <li>Restart NSPanel</li> <li>Display brightness slider</li> <li>Display dim brightness slider</li> </ul>"},{"location":"#boot","title":"Boot","text":""},{"location":"#home-assistant-interface","title":"Home Assistant interface","text":""},{"location":"#devices-page","title":"Device's page","text":"<p>On the device's page under \"Devices &amp; Services\" you can set the global configuration of your device and see the value of it's sensors and relays:</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"#automation-blueprint","title":"Automation (Blueprint)","text":"<p>In your automations you use the blueprint's inputs to define what will be shown on your panel and how it should behave:  </p>"},{"location":"#contributing","title":"\ud83d\ude80 Contributing","text":"<ul> <li>Pull Requests: Please direct all pull requests to the <code>DEV</code> branch, not the <code>main</code> branch.</li> <li>Join Our Team: We're on the lookout for enthusiasts in programming, documentation, and translation. Interested? Please let us know.</li> </ul>"},{"location":"#community-support","title":"\ud83c\udf0d Community &amp; Support","text":"<p>Join our vibrant community! Whether you're seeking support, wanting to contribute, or just looking to share your NSPanel journey, we're here for you.</p> <ul> <li>Issues &amp; Feature requests</li> <li>Discussion Forum</li> <li>Home Assistant Community</li> </ul>"},{"location":"#acknowledgements","title":"\ud83c\udf89 Acknowledgements","text":"<p>A huge thank you to everyone who has contributed to making this project a reality. Your support, feedback, and contributions have been invaluable.</p> <p>And special thanks for the other projects which inspired us:</p> <ul> <li>Hellis81</li> <li>Jimmyboy83</li> <li>joBr99</li> <li>lovejoy77</li> <li>Marcfager</li> <li>Masto</li> <li>sairon</li> <li>SmartHome Yourself</li> </ul>"},{"location":"#donations","title":"\ud83d\udc96 Donations","text":"<p>Are you happy with our version for NSPanel? Please consider supporting us with a donation.</p> <p></p>"},{"location":"addon_climate/","title":"Add-on: Climate","text":""},{"location":"addon_climate/#description","title":"Description","text":"<p>This add-on enables the use of your panel's relays to act as a thermostat (either cooler or heater) using the internal temperature sensor and independent of the network availability.</p>"},{"location":"addon_climate/#attention","title":"Attention","text":"<ol> <li>The NSPanel is limited to 2A per relay. Don't use it for directly power your cooler/heater if exceeding the panel specifications:<ul> <li>150W/110V/Gang, 300W/110V/Total</li> <li>300W/220V/Gang, 600W/220V/Total <p>[!NOTE] More details on the Sonoff NSPanel's page and the product specifications document.</p> </li> </ul> </li> <li>A target temperature must be set on the climate entity in Home Assistant or the page Climate in your panel.</li> </ol>"},{"location":"addon_climate/#installation","title":"Installation","text":"<p>You will need to add the reference to <code>addon_climate_heat</code>, <code>addon_climate_cool</code> or <code>addon_climate_dual</code> files on your ESPHome settings in the <code>package</code> section and after the <code>remote_package</code> (base code), as shown bellow (for <code>heat</code> in this example):</p> <pre><code>substitutions:\n  # Settings - Editable values\n  device_name: \"YOUR_NSPANEL_NAME\" \n  wifi_ssid: !secret wifi_ssid\n  wifi_password: !secret wifi_password\n\n  # Add-on configuration (if needed)\n  ## Add-on climate\n  heater_relay: \"1\"  # Possible values: \"1\" or \"2\"\n\n# Customization area\n##### My customization - Start #####\n##### My customization - End #####\n\n# Core and optional configurations\npackages:\n  remote_package:\n    url: https://github.com/Blackymas/NSPanel_HA_Blueprint\n    ref: main\n    files:\n      - nspanel_esphome.yaml # Core package\n      # Optional advanced and add-on configurations\n      # - advanced/esphome/nspanel_esphome_advanced.yaml\n      # - nspanel_esphome_addon_climate_cool.yaml\n      - nspanel_esphome_addon_climate_heat.yaml\n      # - nspanel_esphome_addon_climate_dual.yaml\n    refresh: 300s\n\nesp32:\n  framework:\n    type: esp-idf\n</code></pre>"},{"location":"addon_climate/#configuration","title":"Configuration","text":"<p>The following keys are available to be used in your <code>substitutions</code>:</p> Key Required Supported values Default Description cooler_relay Mandatory for cool and dual <code>1</code> or <code>2</code> <code>0</code> (disabled) Relay used for control the cooler. User <code>1</code> for \"Relay 1\" or <code>2</code> for \"Relay 2\". heater_relay Mandatory for heat and dual <code>1</code> or <code>2</code> <code>0</code> (disabled) Relay used for control the heater. User <code>1</code> for \"Relay 1\" or <code>2</code> for \"Relay 2\". temp_units Optional <code>\u00b0C</code> or <code>\u00b0F</code> <code>\u00b0C</code> Temperature unit. min_off_time Optional Positive integer representing the number of seconds <code>300</code> Minimum duration (in seconds) the cooling/heating action must be disengaged before it may be engaged. min_run_time Optional Positive integer representing the number of seconds <code>300</code> Minimum duration (in seconds) the cooling/heating action must be engaged before it may be disengaged. min_idle_time Optional Positive integer representing the number of seconds <code>30</code> Minimum duration (in seconds) the idle action must be active before calling another climate action. target_low Optional Number representing a temperature in the selected unit <code>18</code> The initial lower treshold for the target temperature. target_high Optional Number representing a temperature in the selected unit <code>24</code> The initial higher treshold for the target temperature. temp_min Optional Number representing a temperature in the selected unit cool: <code>15</code>heat: <code>7</code>dual: <code>7</code> The minimum temperature the climate device can reach. Used to set the range of the frontend gauge. temp_max Optional Number representing a temperature in the selected unit cool: <code>45</code>heat: <code>35</code>dual: <code>45</code> The maximum temperature the climate device can reach. Used to set the range of the frontend gauge. temp_step Optional Number representing a temperature in the selected unit <code>0.5</code> The granularity with which the target temperature can be controlled. cool_deadband Optional Number representing a temperature hysteresis in the selected unit <code>0.5</code> The minimum temperature differential (temperature above the set point) before engaging cooling. cool_overrun Optional Number representing a temperature hysteresis in the selected unit <code>0.5</code> The minimum temperature differential (cooling beyond the set point) before disengaging cooling. heat_deadband Optional Number representing a temperature hysteresis in the selected unit <code>0.5</code> The minimum temperature differential (temperature below the set point) before engaging heat. heat_overrun Optional Number representing a temperature hysteresis in the selected unit <code>0.5</code> The minimum temperature differential (heating beyond the set point) before disengaging heat. <ul> <li>All values must be delimited with <code>\"\"</code></li> <li>For more details on the keys, please take a look at ESPHome Base Climate Configurations and ESPHome Climate Thermostat - Additional actions behavior.</li> </ul>"},{"location":"addon_climate/#examples","title":"Examples","text":""},{"location":"addon_climate/#cooler","title":"Cooler","text":"<pre><code>substitutions:\n  # Settings - Editable values\n  device_name: \"YOUR_NSPANEL_NAME\" \n  wifi_ssid: !secret wifi_ssid\n  wifi_password: !secret wifi_password\n\n  # Add-on configuration (if needed)\n  ## Add-on climate\n  cooler_relay: \"1\"     # Possible values: \"1\" or \"2\"\n  temp_units: \"\u00b0F\"      # Temperatures in Fahrenheit\n  temp_min: \"40\"        # Min supported temperature is 40\u00b0F\n  temp_max: \"80\"        # Max supported temperature is 80\u00b0F\n  temp_step: \"1\"        # Temperature granularity is 1\u00b0F\n  cool_deadband: \"1.2\"  # Temperature delta before engaging cooling\n  cool_overrun: \"1.2\"   # Temperature delta before disengaging cooling\n\n# Customization area\n##### My customization - Start #####\n##### My customization - End #####\n\n# Core and optional configurations\npackages:\n  remote_package:\n    url: https://github.com/Blackymas/NSPanel_HA_Blueprint\n    ref: main\n    files:\n      - nspanel_esphome.yaml # Core package\n      # Optional advanced and add-on configurations\n      # - advanced/esphome/nspanel_esphome_advanced.yaml\n      - nspanel_esphome_addon_climate_cool.yaml\n      # - nspanel_esphome_addon_climate_heat.yaml\n      # - nspanel_esphome_addon_climate_dual.yaml\n    refresh: 300s\n\nesp32:\n  framework:\n    type: esp-idf\n</code></pre>"},{"location":"addon_climate/#heater","title":"Heater","text":"<pre><code>substitutions:\n  # Settings - Editable values\n  device_name: \"YOUR_NSPANEL_NAME\" \n  wifi_ssid: !secret wifi_ssid\n  wifi_password: !secret wifi_password\n\n  # Add-on configuration (if needed)\n  ## Add-on climate\n  heater_relay: \"1\"     # Possible values: \"1\" or \"2\"\n  temp_units: \"\u00b0F\"      # Temperatures in Fahrenheit\n  temp_min: \"40\"        # Min supported temperature is 40\u00b0F\n  temp_max: \"80\"        # Max supported temperature is 80\u00b0F\n  temp_step: \"1\"        # Temperature granularity is 1\u00b0F\n  heat_deadband: \"1.2\"  # Temperature delta before engaging heat\n  heat_overrun: \"1.2\"   # Temperature delta before disengaging heat\n\n# Customization area\n##### My customization - Start #####\n##### My customization - End #####\n\n# Core and optional configurations\npackages:\n  remote_package:\n    url: https://github.com/Blackymas/NSPanel_HA_Blueprint\n    ref: main\n    files:\n      - nspanel_esphome.yaml # Core package\n      # Optional advanced and add-on configurations\n      # - advanced/esphome/nspanel_esphome_advanced.yaml\n      # - nspanel_esphome_addon_climate_cool.yaml\n      - nspanel_esphome_addon_climate_heat.yaml\n      # - nspanel_esphome_addon_climate_dual.yaml\n    refresh: 300s\n\nesp32:\n  framework:\n    type: esp-idf\n</code></pre>"},{"location":"addon_climate/#dual","title":"Dual","text":"<pre><code>substitutions:\n  # Settings - Editable values\n  device_name: \"YOUR_NSPANEL_NAME\" \n  wifi_ssid: !secret wifi_ssid\n  wifi_password: !secret wifi_password\n\n  # Add-on configuration (if needed)\n  ## Add-on climate\n  heater_relay: \"1\"     # Possible values: \"1\" or \"2\"\n  cooler_relay: \"2\"     # Possible values: \"1\" or \"2\"\n  temp_units: \"\u00b0F\"      # Temperatures in Fahrenheit\n  temp_min: \"40\"        # Min supported temperature is 40\u00b0F\n  temp_max: \"80\"        # Max supported temperature is 80\u00b0F\n  temp_step: \"1\"        # Temperature granularity is 1\u00b0F\n  cool_deadband: \"1.2\"  # Temperature delta before engaging cooling\n  cool_overrun: \"1.2\"   # Temperature delta before disengaging cooling\n  heat_deadband: \"1.2\"  # Temperature delta before engaging heat\n  heat_overrun: \"1.2\"   # Temperature delta before disengaging heat\n\n# Customization area\n##### My customization - Start #####\n##### My customization - End #####\n\n# Core and optional configurations\npackages:\n  remote_package:\n    url: https://github.com/Blackymas/NSPanel_HA_Blueprint\n    ref: main\n    files:\n      - nspanel_esphome.yaml # Core package\n      # Optional advanced and add-on configurations\n      # - advanced/esphome/nspanel_esphome_advanced.yaml\n      # - nspanel_esphome_addon_climate_cool.yaml\n      # - nspanel_esphome_addon_climate_heat.yaml\n      - nspanel_esphome_addon_climate_dual.yaml\n    refresh: 300s\n\nesp32:\n  framework:\n    type: esp-idf\n</code></pre>"},{"location":"alarm/","title":"Alarm Control Panel","text":"<p>You can control an Alarm Control Panel from your NSPanel, which will allow you to set the alarm mode between the standard modes supported by Home Assistant (Home, Away, Night, Vacation or Custom bypass) or disarm the alarm.</p> <p>Currently, only alarms without a code or alarms with a numeric code will be supported. If your alarm requires a text code, you will still be able to display it on your NSPanel, however, when you click in any button it will send services calls to Home Assistant without the code and it will fail for the calls where a code is required.</p> <p>[!IMPORTANT] Security advisory By default, the communication between your NSPanel (ESPHome) and Home Assistant (HA) is not encrypted, which means a person with access to your network could potentially monitor the communication between your panel and HA and replicate the service calls. Although this is not a big issue for most of the service calls (turn-on a light, close a curtain, etc.), it can be a problem when controlling your alarm system.</p> <p>Based on that, we hardly reccoment the use of API encryption for all users controlling an Alarm system via a NSPanel. You can easily enable this by following the \"API encryption\" example available here.</p>"},{"location":"alarm/#configuration","title":"Configuration","text":""},{"location":"alarm/#allow-the-device-to-make-home-assistant-service-calls","title":"Allow the device to make Home Assistant service calls","text":"<p>First, you have to configure your Home Assistant to allow your panel to make service calls. All other services are called from the Blueprint, however this requires the ESPHome to send an event containing in plain text all the information needed to the service call, which could be a security issue, so all the alarm calls will be driven by the panel to ensure a safer environment.</p> <p>To enable this option, go to your ESPHome integrations panel (Settings &gt; Devices and Services &gt; ESPHome) and click \"Configure\" next to the entry related to your panel:</p> <p></p> <p>Then check the option \"Allow the device to make Home Assistant service calls\":</p> <p></p>"},{"location":"alarm/#blueprint-settings","title":"Blueprint settings","text":"<p>Open the automation based on the NSPanel Blueprint and look for a section related to \"Alarm Control Panel\".</p> <p>Select your alarm control panel entity, click \"Save\", and your are done. :sunglasses:</p> <p></p>"},{"location":"alarm/#controlling-your-alarm-from-your-panel","title":"Controlling your alarm from your panel","text":"<p>When an alarm control panel is set in your Blueprint automation, you will see the alarm icon on your panel's Home page. This icon will change following the alarm state as described in the table below.</p> <p>A click on that icon will show the Alarm Control Panel page:</p> <p></p> <p>You can change your alarm settings with a single click on the button related to the new state you want to set your alarm to, or close the page to go back to Home page.</p>"},{"location":"alarm/#description-of-states-shown-with-the-alarm-icon","title":"Description of states shown with the alarm icon","text":"State Color Icon Icon name Description disarmed White mdi:shield-off-outline The alarm is disarmed (off). armed_home Green mdi:shield-home-outline The alarm is armed in home mode. armed_away Green mdi:shield-lock-outline The alarm is armed in away mode. armed_night Green mdi:shield-moon-outline The alarm is armed in night mode. armed_vacation Green mdi:shield-airplane-outline The alarm is armed in vacation mode. armed_custom_bypass Green mdi:shield-half-full The alarm is armed in bypass mode. pending Amber mdi:shield-outline The alarm is pending (towards triggered). arming Amber mdi:shield-outline The alarm is arming. disarming Amber mdi:shield-off-outline The alarm is disarming. triggered Red mdi:shield-alert-outline The alarm is triggered. unknown / unavailable White mdi:shield-alert-outline The alarm state is unknown or unavailable."},{"location":"blueprint/","title":"Blueprint Automation","text":"<p>This article covers the settings in the Blueprint Automation.</p> <p>The Blueprint Automation is the central configuration element of this solution for the NSPanel.</p> <p>In principle, the setup of the automation is self-explanatory. The individual elements of the Blueprint are described below.</p> <p>It is possible to change both the color of the labels and the icons for most of the elements on each screen.</p> <p>On the blueprint settings, you will be able to select any of the MDI icons supported by Home Assistant, however, your panel will only support the icons available on the HASwitchPlate Material Design Icons.</p> <p>For an easier overview, the menu items \"Icon Color\" and \"Label Color\" will not be described separately in the following documentation.</p>"},{"location":"blueprint/#basic-settings","title":"Basic settings","text":""},{"location":"blueprint/#nspanel-device-required","title":"NSPanel device (REQUIRED)","text":"<p>You will be presented with a list of all of your ESPHome ESP32 devices and you must select your panel from the list.</p> <p>This is technically the only required field, as basic functionality will be available when the Blueprint knows to which panel it have to send the settings.</p> <p>[!NOTE] You cannot have more than one blueprint based automation per each panel</p>"},{"location":"blueprint/#language-for-nspanel","title":"Language for NSPanel","text":"<p>The language can be selected via the drop-down menu.</p> <p>Currently around 30 languages are supported, but if you cannot find your language there, please create a new feature request and we will be happy to help.</p>"},{"location":"blueprint/#date-format","title":"Date format","text":"<p>Select how you want to see the date displayed on your panel (Home page and weather pages are affected).</p>"},{"location":"blueprint/#time-format","title":"Time format","text":"<p>Select how you want to see the time displayed on your panel's Home page.</p>"},{"location":"blueprint/#delay-to-avoid-synchronization-problems","title":"Delay to avoid synchronization problems","text":"<p>If the Wi-Fi signal is poor, you may have issues when loading some pages. If this happens, try to increase this delay as that may help.</p>"},{"location":"blueprint/#weather-and-temperature","title":"Weather and Temperature","text":""},{"location":"blueprint/#weather-entity-from-ha","title":"Weather entity from HA","text":"<p>Select a Weather entity to use.</p> <p>Most of the weather integrations are supported, however some may be able to provide more information than others.</p> <p>We run all of our tests with \"Accuweather\", so the parameters shown on the panel are targetting this integration and will be shown with your integration when available.</p>"},{"location":"blueprint/#outdoor-temperature-sensor-optional","title":"Outdoor temperature Sensor (Optional)","text":"<p>Optionally, the value of an outdoor temperature sensor can be used here. If no separate sensor is used, the value of the weather integration will be used.</p>"},{"location":"blueprint/#indoor-temperature-sensor-optional","title":"Indoor Temperature Sensor (Optional)","text":"<p>An indoor temperature sensor is not necessary. Leave the field empty if you want to use the temperature sensor of the NSPanel. If the value of the sensor needs to be corrected, this can be done via the temperature correction for the NSPanel under HA Devices.</p>"},{"location":"blueprint/#home-page-sensor","title":"Home page - Sensor","text":""},{"location":"blueprint/#sensor-01-03-entity-optional","title":"Sensor 01-03 - Entity (Optional)","text":"<p>Up to three sensors can be displayed on the home screen. Select the corresponding HA entity.</p>"},{"location":"blueprint/#home-page-chips","title":"Home page - Chips","text":""},{"location":"blueprint/#chip-01-07-entity-optional","title":"Chip 01-07 - Entity (Optional)","text":"<p>Used to display HA entities on the home screen. For example to display the status of a specific switch on the NSPanel.</p>"},{"location":"blueprint/#home-page-custom-buttons","title":"Home page - Custom buttons","text":""},{"location":"blueprint/#custom-button-01-06-entity-optional","title":"Custom button 01-06 - Entity (Optional)","text":"<p>Your panel will show 10 buttons on the Home page. 4 of those are fixed for Notifications, QR Code, Entities pages and Alarm, but you have additional 6 custom buttons that can be assigned to different entities from your Home Assistant. The behavior of these buttons will depend on the entity's domain (light, media player, etc).</p>"},{"location":"blueprint/#alarm-control-panel","title":"Alarm Control Panel","text":"<p>An alarm control panel entity can be controlled by your panel. When you assign the entity here, it's icon will be shown as a button on the Home page.</p>"},{"location":"blueprint/#climate","title":"Climate","text":""},{"location":"blueprint/#climate-to-control-optional","title":"Climate to Control (Optional)","text":"<p>Here you select the main climate entity controlled by your panel. It's temperature will be used on the Home page and by clicking on that value you will be able to control the climate settings.</p> <p>You can optionally use your panel to control a climate system locally, using it's temperature sensor and relays. You will find more details about this on the Add-on Climate docummentation.</p> <p>If you are using the Add-on Climate, it will create a climate entity in your panel's device page. You still have to select that entity on this field in the blueprint settings to have it used as your main climate.</p> <p>Additional climate entities can be assigned to buttons and will be explained later in this documment.</p> <p>On the blueprint settings, you will also find settings for sensors and custom buttons to be shown on all the climate pages.</p>"},{"location":"blueprint/#qr-code","title":"QR Code","text":""},{"location":"blueprint/#activate-qr-code-optional","title":"Activate QR Code (Optional)","text":"<p>Activates the QR Code page and shows the QR Code button on the Home page.</p>"},{"location":"blueprint/#qr-code-content-optional","title":"QR Code content (Optional)","text":"<p>String, which is shown as a QR Code on the NSPanel. This can be a simple text, a URL or could also be used for a simplified login to the Wi-Fi. Here is an example (simply change SSID and password to your credentials and either use \"WPA\" or \"WEP\"):</p> <p><code>Wi-Fi:S:SSID;T:WPA/WEP;P:PASSWORD;;</code></p>"},{"location":"blueprint/#example","title":"Example:","text":"<p>For a network with the following parameters: - SSID: my_ssid - Pass: MySecurePa$$w0rd - Type: WPA</p> <p>Your QR code string will look like this:</p> <p><code>Wi-Fi:S:my_ssid;T:WPA;P:MySecurePa$$w0rd;;</code></p> <p>For more details about these specifications, please visit the WPA3\u2122 Specification v3.1, chapter 7.</p>"},{"location":"blueprint/#hardware-buttons","title":"Hardware Buttons","text":""},{"location":"blueprint/#activate-relay-x-local-fallback-optional","title":"Activate Relay x local Fallback (Optional)","text":"<p>Normally, the internal relays of the NSPanels are triggered via HA. If the NSPanel loses Wi-Fi connection or HA is down, the hardware button can then switch the corresponding relay directly.</p>"},{"location":"blueprint/#leftright-hardware-button-entity-optional","title":"Left/Right Hardware Button - Entity (Optional)","text":"<p>The entity that should be switched with the left/right hardware button.</p>"},{"location":"blueprint/#leftright-hardware-button-name-label-optional","title":"Left/Right Hardware Button Name - Label (Optional)","text":"<p>Text on the screen above the corresponding hardware button (home screen).</p>"},{"location":"blueprint/#leftright-hardware-button-hold-assignment-value-optional","title":"Left/Right Hardware Button hold assignment - VALUE (optional)","text":"<p>Selection of what action should happen when the button is pressed for a longer time.</p>"},{"location":"blueprint/#leftright-hardware-button-custom-hold-action-value-optional","title":"Left/Right Hardware Button custom hold action - VALUE (Optional)","text":"<p>Selection of the action to start when holding the button.</p>"},{"location":"blueprint/#button-page-01-04","title":"Button Page 01-04","text":""},{"location":"blueprint/#button-page-01-04-name-label-optional","title":"Button Page 01-04 name - LABEL (Optional)","text":"<p>Text on the respective button screens.</p>"},{"location":"blueprint/#buttons-01-32-optional","title":"Buttons 01 - 32 (Optional)","text":"<p>The buttons can be accessed by swiping on the Home Screen and their functions are completely identical. Either the individual button pages can be accessed one after the other by swiping to the left, or the button pages can be accessed directly by swiping up, down or to the right.</p> <p>The buttons are numbered as follows:</p>"},{"location":"blueprint/#eu-and-us-landscape-models","title":"EU and US landscape models:","text":"Button Page 1 Button Page 2 Button Page 3 Button Page 4 Row 1 01 02 03 04 09 10 11 12 17 18 19 20 25 26 27 28 Row 2 05 06 07 08 13 14 15 16 21 22 23 24 29 30 31 32"},{"location":"blueprint/#us-model","title":"US model:","text":"Button Page 1 Button Page 2 Button Page 3 Button Page 4 Row 1 01 \u00a0\u00a0\u00a0 02 09 \u00a0\u00a0\u00a0 10 17 \u00a0\u00a0\u00a0 18 25 \u00a0\u00a0\u00a0 26 Row 2 03 \u00a0\u00a0\u00a0 04 11 \u00a0\u00a0\u00a0 12 19 \u00a0\u00a0\u00a0 20 27 \u00a0\u00a0\u00a0 28 Row 3 05 \u00a0\u00a0\u00a0 06 13 \u00a0\u00a0\u00a0 14 21 \u00a0\u00a0\u00a0 22 29 \u00a0\u00a0\u00a0 30 Row 4 07 \u00a0\u00a0\u00a0 08 15 \u00a0\u00a0\u00a0 16 23 \u00a0\u00a0\u00a0 24 31 \u00a0\u00a0\u00a0 32 <p>When the respective button is pressed, a toggle action is executed or the corresponding page is automatically opened, e.g. the cover control for covers, etc. For 2 state buttons (where toggle is the default action), a long press in the button will open it's corresponding page, when supported.</p> <p>For each button an own name can be specified optionally.</p> <p>All buttons offer the possibility to optionally confirm the execution of the action. This can be activated or deactivated separately for each button via \"Confirm execution of the button press\".</p>"},{"location":"blueprint/#entity-page-01-04","title":"Entity Page 01-04","text":""},{"location":"blueprint/#activate-entity-page-optional","title":"Activate Entity Page (Optional)","text":"<p>This option activates the entity pages on the Home Screen. The entity pages can be used for example to display values or statuses of entities on the individual pages.</p>"},{"location":"blueprint/#entity-page-01-04-name-label-optional","title":"Entity Page 01-04 name - LABEL (Optional)","text":"<p>Naming of the corresponding Entity Screens.</p>"},{"location":"blueprint/#entity-01-32-optional","title":"Entity 01 - 32 (Optional)","text":"<p>The entity pages can be accessed by pressing the symbol on the Home Screen and their functions are completely identical.</p> <p>The entities are numbered as follows:</p> Entity page Entities shown 1 01 to 08 2 09 to 16 3 17 to 24 4 25 to 32 <p>Additionally there is the possibility to choose an icon of your choice for the Entities button on the Home page.</p> <p>Of course there is also the possibility to enter a label for each of the 4 pages and the aligment for the values on the entities pages.</p>"},{"location":"blueprint/#example-screenshots","title":"Example Screenshots","text":""},{"location":"customization/","title":"Customization","text":"<p>Table of contents: - Description - Instructions - Examples   - API encryption   - Custom OTA password   - Web server credentials   - Reboot when API fails   - Manual IP   - Hidden Wi-Fi   - Connect to multiple networks   - SNTP (time) server   - Sensor for display awake vs sleeping   - Deep sleep   - Enforce time zone   - Compiling ESPHome on lower powered machines   - Sleep &amp; Wake-up buttons   - Set display as a light   - Scheduled actions     - Scheduled relay     - Scheduled climate   - Framework <code>esp-idf</code>   - Bluetooth proxy   - Logger via UART   - Climate custom presets   - Push button / Momentary switch   - Expose relay fallback switch</p> <p> </p>"},{"location":"customization/#description","title":"Description","text":"<p>This project adds lots of functionalities to your NSPanel and we are constantly adding new features based on user's feedback. However, you might have some specific case that are not included on the current implementation or is not a common case for other users.</p> <p>You can take advantage of ESPHome Configuration Types to add your custom functionality or even to customize an existing functionality with minimum effort and this document intents to clarify how to use this and give some examples of customization.</p> <p>Please feel free to add your own customation to this document by creating a PR in the <code>dev</code> branch.</p> <p>IMPORTANT: - Use customization at your own risk. Custom/advanced systems won't be supported by this project's team. - Please monitor the memory consumption when using customizations. Getting closer to the full memory can drive to errors in the system or prevent your system to support the future updates.</p> <p> </p>"},{"location":"customization/#instructions","title":"Instructions","text":"<p>There's nothing particular for this project, so you can just use any of the ESPHome Configuration Types and only edit your local ESPHome yaml settings.</p> <p>Most of the ESPHome components in this project contains an <code>Id</code>, which can be used together with the <code>!extend</code> key to add or replace existing code.</p> <p>You should add your customizations at the end of your ESPHome yaml, as in the example bellow:</p> <pre><code>substitutions:\n  # Settings - Editable values\n  device_name: \"YOUR_NSPANEL_NAME\" \n  wifi_ssid: !secret wifi_ssid\n  wifi_password: !secret wifi_password\n\n  # Add-on configuration (if needed)\n  ## Add-on climate\n  # heater_relay: \"1\"  # Possible values: \"1\" or \"2\"\n\n# Customization area\n##### My customization - Start #####\n\n# Encrypt the communication between ESPHome and Home Assistant\napi:\n  encryption:\n    key: !secret api_encryption_key\n\n# More detailed log (for troubleshooting only)\nlogger:\n  level: VERBOSE\n\n##### My customization - End #####\n\n# Core and optional configurations\npackages:\n  remote_package:\n    url: https://github.com/Blackymas/NSPanel_HA_Blueprint\n    ref: main\n    files:\n      - nspanel_esphome.yaml # Core package\n      # Optional advanced and add-on configurations\n      # - advanced/esphome/nspanel_esphome_advanced.yaml\n      # - nspanel_esphome_addon_climate_cool.yaml\n      - nspanel_esphome_addon_climate_heat.yaml\n      # - nspanel_esphome_addon_climate_dual.yaml\n    refresh: 300s\n\nesp32:\n  framework:\n    type: esp-idf\n</code></pre>"},{"location":"customization/#examples","title":"Examples","text":""},{"location":"customization/#api-encryption","title":"API encryption","text":"<p>[!IMPORTANT] Changing the API encryption can break the connection to Home Assistant, requiring the device to be removed from integrations (Settings &gt; Devices &amp; Services &gt; ESPHome) and then re-added.</p> <p>This is highly recommended when you are transfer sensitive information between your panel and Home Assistant, as when you use your panel to enter the PIN for an Alarm Control Panel.</p> <pre><code># Encrypt the communication between ESPHome and Home Assistant\napi:\n  encryption:\n    key: !secret api_encryption_key\n</code></pre>"},{"location":"customization/#custom-ota-password","title":"Custom OTA password","text":"<p>By default, the Wi-Fi password will be used as your OTA password, but you can replace it.</p> <p>First, you need to change the default password using this code.</p> <pre><code># change OTA password, remove after flashing\nesphome:\n  on_boot:\n    - priority: 601.0\n      then:\n        - lambda: |-\n            id(my_ota).set_auth_password(\"New password\");\nota:\n  password: !secret wifi_password\n  id: my_ota\n</code></pre> <p>After flashing the device, you must remove the code above and replace it with the code below to start using this customization.</p> <pre><code># Use my global OTA password\nota:\n  password: !secret ota_password\n</code></pre>"},{"location":"customization/#web-server-credentials","title":"Web server credentials","text":"<p>By default, the web server credentials are defined by this project using <code>admin</code> as <code>username</code> and your <code>Wi-Fi password</code> as <code>password</code>, but you can replace it using this customization:</p> <pre><code># Custom web server credentials\nweb_server:\n  auth:\n    username: !secret web_server_username\n    password: !secret web_server_password\n</code></pre>"},{"location":"customization/#reboot-when-api-fails","title":"Reboot when API fails","text":"<p>Reboot your panel if it loses it's connection to Home Assistant for more than a certain time (15 minutes in this example).</p> <p>Sometimes the low level ESP functions could report that the ESP is connected to the network, when in fact it is not and only a full reboot fixes it.</p> <p>To support long times without Wi-Fi, this is disabled by default in this project, but you can set a reasonable interval to restart, based on your network reliability.</p> <pre><code># Reboot if HA is not connected for 15 minutes\napi:\n  reboot_timeout: 15min\n</code></pre>"},{"location":"customization/#manual-ip","title":"Manual IP","text":"<p>Set IP address manually.</p> <pre><code># Set IP address manually\nwifi:\n  networks:\n    - id: !extend wifi_default\n      manual_ip:\n        static_ip: 192.168.0.123\n        gateway: 192.168.0.1\n        subnet: 255.255.255.0\n</code></pre>"},{"location":"customization/#hidden-wi-fi","title":"Hidden Wi-Fi","text":"<p>Connect to a hidden Wi-Fi network.</p> <pre><code># Connect to a hidden Wi-Fi network.\nwifi:\n  networks:\n    - id: !extend wifi_default\n      hidden: true\n  fast_connect: true\n</code></pre>"},{"location":"customization/#connect-to-multiple-networks","title":"Connect to multiple networks","text":"<p>NSPanel will attempt to connect to the one with the highest signal strength or, if you set a priority, it will try to connect to the highest priority. After failing it will connect to the second network.</p> <pre><code># Set dual network\nwifi:\n  networks:\n    - id: !extend wifi_default\n      priority: 10\n    - ssid: !secret wifi_ssid_backup\n      password: !secret wifi_password_backup\n      priority: 0\n</code></pre>"},{"location":"customization/#sntp-time-server","title":"SNTP (time) server","text":"<p>ESPHome takes it's time from Home Assistant, however you can configure it to use a Network Time Server instead.</p> <pre><code># Use my own local network time server\ntime:\n  - id: !extend time_provider\n    platform: sntp\n    timezone: Europe/Stockholm\n    servers:\n      - !secret mysntpserver\n      - europe.pool.ntp.org\n      - 0.pool.ntp.org\n</code></pre>"},{"location":"customization/#sensor-for-display-awake-vs-sleeping","title":"Sensor for display awake vs sleeping","text":"<p>Creates a binary sensor to indicate either when the display is showing some page (<code>on</code>) or sleeping (<code>off</code>).</p> <pre><code># Is display awake?\nbinary_sensor:\n  - name: ${device_name} Display state\n    id: display_state\n    platform: template\n    lambda: |-\n      return (id(current_page).state != \"screensaver\");\n</code></pre> <p>You can easily invert the meaning to have a sensor for display sleeping:</p> <pre><code># Is display sleeping?\nbinary_sensor:\n  - name: ${device_name} Display sleeping\n    id: display_sleeping\n    platform: template\n    lambda: |-\n      return (id(current_page).state == \"screensaver\");\n</code></pre>"},{"location":"customization/#deep-sleep","title":"Deep sleep","text":"<p>In this example, the panel will deep sleep for 7 hours, starting at 23:00:00 every day, for its maximum energy saving.</p> <p>During this time, nothing will be shown, the screen will be off and therefore no response to touch, and the panel will be disconnected from Wi-Fi, but you can still wake-up the panel by pressing one of the hardware buttons (the left one in this example):</p> <pre><code># Define the wake-up button. Use pin 14 for left button or pin 27 for right button\ndeep_sleep:\n  wakeup_pin:\n    number: 14\n    allow_other_uses: true\n  wakeup_pin_mode: INVERT_WAKEUP\n\nbinary_sensor:\n  - id: !extend left_button\n    pin:\n      allow_other_uses: true\n\ntime:\n  - id: !extend time_provider\n    on_time:\n      - hours: 23\n        minutes: 0\n        seconds: 0\n        then:\n          - deep_sleep.enter:\n              sleep_duration: 7h\n</code></pre> <p>You can find more ideas around this on #955.</p>"},{"location":"customization/#enforce-time-zone","title":"Enforce time zone","text":"<p>Until v3.4 (including), the time was coming from Home Assistant with it's timezone, so the Blueprint was sending the info with no transformation, to the panel. From v4.0, the time reference still coming from HA (or optionally from a time server), but is calculated in ESPHome, which will try to detect the timezone from the server.</p> <p>If your system is not showing the time in the correct timezone, it's probabily ESPHome not succeeding on finding your time zone. You can easily force a timezone by adding this to your ESPHome settings:</p> <pre><code>time:\n  - id: !extend time_provider\n    timezone: \"America/Cancun\"\n</code></pre>"},{"location":"customization/#compiling-esphome-on-lower-powered-machines","title":"Compiling ESPHome on lower powered machines","text":"<p>For systems with lower CPU or memory capabilities, like an RPi 3 or systems with less than 2GB of RAM, this could help preventing errors caused by lack of resources when compiling ESPHome firmware.</p> <p>More datails on the ESPHome docs.</p> <pre><code># Limit the amount of resources used for compiling\nesphome:\n  compile_process_limit: 1\n</code></pre>"},{"location":"customization/#sleep-wake-up-buttons","title":"Sleep &amp; Wake-up buttons","text":"<p>There are several ways to wake-up or put your panel to sleep, but in this example we tried a simple approach by adding two buttons (you can implement only one of those if you want):</p> <pre><code>button:\n  # Adds a button to put the panel to sleep\n  - name: ${device_name} Sleep\n    id: force_sleep\n    platform: template\n    icon: mdi:sleep\n    on_press:\n      then:\n        - logger.log: Button Sleep pressed\n        - lambda: |-\n            if (id(current_page).state != \"screensaver\") id(disp1).goto_page(\"screensaver\");\n\n  # Adds a button to wake-up the panel (similar to the existing service)\n  - name: ${device_name} Wake-up\n    id: force_wake_up\n    platform: template\n    icon: mdi:alarm\n    on_press:\n      then:\n        - logger.log: Button Wake-up pressed\n        - lambda: |-\n            if (id(current_page).state == \"screensaver\") id(disp1).goto_page(id(wakeup_page_name).state.c_str());\n            // id(timer_page).execute(id(wakeup_page_name).state.c_str()); // enable this if you want page timeout to be reset\n            id(timer_sleep).execute(id(wakeup_page_name).state.c_str(), int(id(timeout_sleep).state));\n            id(timer_dim).execute(id(wakeup_page_name).state.c_str(), int(id(timeout_dim).state));\n</code></pre>"},{"location":"customization/#set-display-as-a-light","title":"Set display as a light","text":"<p>You can set your display as a light in Home Assistant, so you can control the brightness and turn on/off just like any other light, and even use this in your automation to control when your panel is on with the same automation you use for your lights:</p> <pre><code>light:\n  # Add the display as a light in Home Assistant\n  - name: ${device_name} Display\n    id: display_light\n    icon: mdi:tablet-dashboard\n    platform: monochromatic\n    output: display_output\n    default_transition_length: 0s\n    on_turn_on:\n      then:\n        - lambda: |-\n            ESP_LOGD(\"light.display_light\", \"Turn-on\");\n            if (current_page-&gt;state == \"screensaver\") disp1-&gt;goto_page(wakeup_page_name-&gt;state.c_str());\n            timer_reset_all-&gt;execute(wakeup_page_name-&gt;state.c_str());\n    on_turn_off:\n      then:\n        - lambda: |-\n            ESP_LOGD(\"light.display_light\", \"Turn-off\");\n            disp1-&gt;goto_page(\"screensaver\");\n\noutput:\n  # Output required by `display_light` to send the commands to Nextion\n  - id: display_output\n    platform: template\n    type: float\n    write_action:\n      - lambda: |-\n          ESP_LOGV(\"output.display_output\", \"state: %f\", state);\n          uint8_t current_brightness = int(round(display_light-&gt;current_values.is_on() ? (display_light-&gt;current_values.get_brightness() * 100.0f) : 0.0));\n          ESP_LOGV(\"output.display_output\", \"current_brightness: %i%%\", current_brightness);\n          set_brightness-&gt;execute(current_brightness);\n\nscript:\n  # Updates the existing `page_changed` script to update the `display_light` status when a page changes\n  - id: !extend page_changed\n    then:\n      - lambda: |-\n          ESP_LOGD(\"script.page_changed(custom)\", \"page: %s\", page.c_str());\n          ESP_LOGV(\"script.page_changed(custom)\", \"is_on(): %s\", display_light-&gt;current_values.is_on() ? \"True\" : \"False\");\n          if (page == \"screensaver\" and display_light-&gt;current_values.is_on()) {\n            auto call = display_light-&gt;turn_off();\n            call.perform();\n          } else if (page != \"screensaver\" and (not display_light-&gt;current_values.is_on())) {\n            auto call = display_light-&gt;turn_on();\n            call.perform();\n          }\n\n  # Updates the existing `set_brightness` script to update the `display_light` status when a new brightness level is set\n  - id: !extend set_brightness\n    then:\n      - lambda: |-\n          ESP_LOGD(\"script.set_brightness(custom)\", \"brightness: %i%%\", brightness);\n          uint8_t current_brightness = int(round(display_light-&gt;current_values.is_on() ? (display_light-&gt;current_values.get_brightness() * 100.0f) : 0.0));\n          ESP_LOGV(\"script.set_brightness(custom)\", \"current_brightness: %i%%\", current_brightness);\n          if (brightness != current_brightness) {\n            if (current_page-&gt;state != \"screensaver\" and brightness &gt; 0) {\n              auto call = display_light-&gt;turn_on();\n              call.set_brightness(static_cast&lt;float&gt;(id(display_last_brightness)) / 100.0f);\n              call.perform();\n            } else if (display_light-&gt;current_values.is_on()) {\n              auto call = display_light-&gt;turn_off();\n              call.set_brightness(0);\n              call.perform();\n            }\n          }\n</code></pre>"},{"location":"customization/#scheduled-actions","title":"Scheduled actions","text":"<p>Although ESPHome doesn't have a Scheduler component, it is possible to use the timer to schedule actions and this is entirely managed in the device, so it will work even if Home Assistant and/or the Wi-Fi are unavailable.</p> <p>Following some examples:</p>"},{"location":"customization/#scheduled-relay","title":"Scheduled relay","text":"<pre><code># Scheduled relay\ntime:\n  - id: !extend time_provider\n    on_time:\n      - hours: 7\n        minutes: 30\n        seconds: 0\n        then:\n          - switch.turn_on: relay_1\n      - hours: 12\n        minutes: 15\n        seconds: 0\n        then:\n          - switch.turn_off: relay_1\n      - hours: 19\n        minutes: 0\n        seconds: 0\n        then:\n          - switch.turn_on: relay_1\n      - hours: 23\n        minutes: 30\n        seconds: 0\n        then:\n          - switch.turn_off: relay_1\n</code></pre>"},{"location":"customization/#scheduled-climate","title":"Scheduled climate","text":"<p>[!NOTE] This requires add-on climate to be installed</p> <pre><code># Scheduled climate\ntime:\n  - id: !extend time_provider\n    on_time:\n      - hours: 7\n        minutes: 0\n        seconds: 0\n        then:\n          - climate.control:\n              id: thermostat_embedded\n              mode: auto\n              target_temperature: 22\u00b0C\n      - hours: 19\n        minutes: 0\n        seconds: 0\n        then:\n          - climate.control:\n              id: thermostat_embedded\n              mode: auto\n              target_temperature: 20\u00b0C\n      - hours: 23\n        minutes: 0\n        seconds: 0\n        then:\n          - climate.control:\n              id: thermostat_embedded\n              mode: auto\n              target_temperature: 18\u00b0C\n</code></pre>"},{"location":"customization/#framework-esp-idf","title":"Framework <code>esp-idf</code>","text":"<p>[!IMPORTANT] When switching from <code>arduino</code> to <code>esp-idf</code>, make sure to update the device with a serial cable as the partition table is different between the two frameworks as OTA Update Component updates will not change the partition table.</p> <p>The <code>arduino</code> protocol still more popular and therefore more components are available, but as <code>esp-idf</code> is maintained by EspressIF and is kept updated, more boards are supported and the memory management is better, making it ideal if you wanna customize your panel to support memory consumption functionalities, like <code>bluetooth_proxy</code> or Improv.</p> <p>This project currently uses <code>arduino</code> as default framework, but we are planning to set <code>esp-idf</code> as default from March 2024. In any case, you can overlap the settings with this customization.</p> <p>[!NOTE] For more info about frameworks, please visit ESPHome docs.</p> <pre><code># Change framework to `esp-idf`\nesp32:\n  framework:\n    type: esp-idf\n</code></pre>"},{"location":"customization/#bluetooth-proxy","title":"Bluetooth proxy","text":"<p>[!IMPORTANT] The ESP32 Platform component should be configured to use the <code>esp-idf</code> framework, as the <code>arduino</code> framework uses significantly more memory and performs poorly with the Bluetooth proxy enabled.</p> <pre><code># Enable Bluetooth proxy\nbluetooth_proxy:\n# Set Wi-Fi power save mode to \"LIGHT\" as required for Bluetooth on ESP32\nwifi:\n  power_save_mode: LIGHT\n</code></pre>"},{"location":"customization/#logger-via-uart","title":"Logger via UART","text":"<p>By default, the logging via hardware UART is disable in this project. You can enable it by setting the baud rate accordingly to your interface:</p> <pre><code># Enable hardware UART serial logging\nlogger:\n  baud_rate: 115200\n</code></pre>"},{"location":"customization/#climate-custom-presets","title":"Climate custom presets","text":"<pre><code># Add custom presets to your climate (heat in this example)\nclimate:\n  - id: !extend thermostat_embedded\n    default_preset: \"Home\"\n    preset:\n      - name: \"Off\"\n        default_target_temperature_low: ${temp_min} ${temp_units}\n        mode: \"off\"\n      - name: Home\n        default_target_temperature_low: 21 ${temp_units}\n        mode: \"heat\"\n      - name: Away\n        default_target_temperature_low: 16.5 ${temp_units}\n        mode: \"heat\"\n      - name: Sleep\n        default_target_temperature_low: 17.5 ${temp_units}\n        mode: \"heat\"\n</code></pre>"},{"location":"customization/#push-button-momentary-switch","title":"Push button / Momentary switch","text":"<p>You can set the physical relays to be <code>on</code> only while the hardware buttons are pressed, and then back to <code>off</code> when the buttons are released:</p> <pre><code>binary_sensor:\n  # Left button custom action: Push button / Momentary switch - Relay 1\n  - id: !extend left_button\n    on_click:\n      then:\n    on_press:\n      then:\n        switch.turn_on: relay_1\n    on_release:\n        switch.turn_off: relay_1\n\n  # Right button custom action: Push button / Momentary switch - Relay 2\n  - id: !extend right_button\n    on_click:\n      then:\n    on_press:\n      then:\n        switch.turn_on: relay_2\n    on_release:\n        switch.turn_off: relay_2\n</code></pre>"},{"location":"customization/#expose-relay-fallback-switch","title":"Expose Relay Fallback Switch","text":"<p>You can configure a local fallback relay to integrate with Home Assistant. This is particularly useful for devices like WiFi-connected lights. For instance, you can program it to cut the power to a connected light under certain conditions, directly via a switch.</p>"},{"location":"customization/#use-case","title":"Use Case","text":"<p>One application, as utilized by @tikismoke and detailed in #1349, is in response to fluctuating energy prices. When the energy price is high, an automation can change the fallback mode to cut off the relay. This ensures that the bulb does not consume energy in standby mode. However, it will still function normally with <code>light.toggle</code> from the blueprint in all other cases. Local control is reinstated when the power price returns to normal. On the next switch activation, the relay turns <code>on</code>, powering up the bulb. Subsequent activations will trigger <code>light.toggle</code> from the blueprint, as this functionality is already embedded in the ESPHome YAML code.</p> <p>[!NOTE] In this scenario, the bulb must be set to turn <code>on</code> automatically when power is restored.</p> <pre><code># Expose relay local control switch to Home Assistant\nswitch:\n  - id: !extend relay1_local\n    internal: false\n  - id: !extend relay2_local\n    internal: false\n</code></pre>"},{"location":"error_initializing/","title":"Panel stuck on Boot page","text":"<p>When your panel starts, a number of different things needs to be set and the ESPHome must establish connection to the Nextion display used by your panel and also to your Home Assistant, which will provide the propper settings required by your panel. If everything goes right, the boot page will be shown for just a few seconds, then the wake-up page will be shown.</p> <p>If something happens during this process, your panel may get stuck on this page. In many cases, restarting your panel can resolve the issue, but if after a reboot it still showing the boot page, this guide may help you.</p> <p>Understanding what is shown on the boot page can be useful to find the cause of the problem or when you are looking for help.</p>"},{"location":"error_initializing/#understanding-the-boot-page","title":"Understanding the boot page","text":"<p>Your boot page probably looks like this:</p> <p>Before ESPHome is connected:</p> <p></p> <p>When ESPHome is connected:</p> <p></p>"},{"location":"error_initializing/#what-is-shown-on-the-screen","title":"What is shown on the screen","text":""},{"location":"error_initializing/#initializing-or-ip-address","title":"Initializing or IP address","text":"<p>In the top, you will see the message \"Initializing...\" while the display is executing it's boot sequence or waiting for a connection from ESPHome.</p> <p>Once ESPHome is connected to both the display and the Wi-Fi network, that text will be replace by the IP address, which can be useful for troubleshooting.</p>"},{"location":"error_initializing/#baud-rate-bps","title":"Baud rate (bps)","text":"<p>On the top right corner, it's shown the baud rate used by the display to communicate to ESPHome. By default, all the communication should happens at 115200 bps, but as 921600 bps is also supported, the display will alternate between these 2 rates every 30 seconds until ESPHome gets connected.</p>"},{"location":"error_initializing/#framework","title":"Framework","text":"<p>Right bellow the baud rate information, you may see the framework used by ESPHome, which is either <code>esp-idf</code> (default for new installations) or <code>arduino</code> (default for installations prior v4.1.4).</p> <p>That information will be available only when ESPHome establishes communication with the display. If you cannot see that information after a couple of seconds then you may have an issue on the communication between ESPHome and the display (explained later).</p>"},{"location":"error_initializing/#versions","title":"Versions","text":"<p>Here you may see the version of TFT, ESPHome and Blueprint used by this project.</p> <p>If some of those versions are not shown, you can have an indication of where a possible communication issue is.</p> <ul> <li>TFT version will always be shown, as that is part of the display itself.</li> <li>ESPHome version will be shown as soon the ESPHome establishes the communication with the display.</li> <li>Blueprint version requires both ESPHome and Blueprint to establish communication to be shown.</li> </ul> <p>In normal situation, all the versions should be displayed and should be the same. Different patch versions are supported.</p>"},{"location":"error_initializing/#reboot-button","title":"Reboot button","text":"<p>You can use this button to force a reboot of your panel. This button is available when ESPHome establishes communication with the display.</p>"},{"location":"error_initializing/#common-issues","title":"Common issues","text":""},{"location":"error_initializing/#esphome-cannot-establish-communication-to-your-panels-nextion-display","title":"ESPHome cannot establish communication to your panel's Nextion display","text":"<p>Symptoms: The ESPHome version (and other info) won't be shown in the boot page.</p> Possible causes Suggestions You may have an older version of ESPHome installed or ESPHome is not installed. Make sure you have the latest version of ESPHome and flash your device again. You may have an older version of ESPHome installed or ESPHome is not installed. Make sure you have the latest version of ESPHome and flash your device again. Baud rate mismatch. Make sure your yaml settings don't have any specific baud rate set or, if a custom baud rate is set, make sure it is one of the supported rates (115200 bps or 921600 bps)."},{"location":"error_initializing/#blueprint-is-not-detected","title":"Blueprint is not detected","text":"<p>Symptoms: The ESPHome version is shown, but not the blueprint version.</p> Possible causes Suggestions You may have an older version of the blueprint installed or the blueprint isn't installed into your Home Assistant. Install the blueprint.Update the blueprint. You don't have an automation created using the blueprint. On Home Assistant, go to Settings --&gt; Automations &amp; Scenes --&gt; Blueprints --&gt; NSPanel Configuration --&gt; CREATE AUTOMATION and follow the instructions to setup your automation.Attention!! You need one automation per panel, if you have more than one panel set. Your panel is not selected in the automation. Open the automation related to your panel and make sure the right device is set on the NSPanel device field. Reconnect the Panel's device to Home Assistant. 1. Go to Settings --&gt; Devices &amp; Services --&gt; ESPHome2. Delete the device3. Restart Home Assistant host4. Go back to Settings --&gt; Devices &amp; Services5. Click Add integration6. Select ESPHome7. Enter your panel's hostname or IP address."},{"location":"error_initializing/#additional-tips-and-resources","title":"Additional Tips and Resources","text":"<p>After troubleshooting, if issues persist, consult the Issues and feel free to create a new one asking for more personalized assistance.</p> <p>Please share as much info as possible, like: 1. Describing (or a picture of) what is in your screen 2. Are updating from a previous version of this same project, or coming from another NSPanel customization (which one?) or customizing for the first time a panel with original Sonoff settings? 3. Please share the ESPHome logs from when your panel starts to the moment the upload fails. 4. Describe what you have already tried.</p>"},{"location":"error_initializing/#important-note","title":"Important note","text":"<p>Remember, these steps are a guideline and might vary slightly based on your specific setup and previously installed system.</p>"},{"location":"esphome/","title":"ESPHome Compiling Errors Guide","text":"<p>The most common cases for compiling errors are related to build files needing to be cleaned up and to lack of resourced on your ESPHome compiler host. These are our suggestions for both cases:</p>"},{"location":"esphome/#clean-up-build-files","title":"Clean-up build files","text":"<p>Go to your ESPHome Dashboard, click the 3-dot meny related to your device and then \"Clean Build Files\":</p> <p></p>"},{"location":"esphome/#limited-resources-on-esphome-compiler-host","title":"Limited resources on ESPHome compiler host","text":""},{"location":"esphome/#free-up-server-resources","title":"Free Up Server Resources","text":"<ol> <li>Add the following to your device's YAML to reduce resource usage (this may slow down the compilation process):</li> </ol> <pre><code># Limit the amount of resources used for compiling\nesphome:\n  compile_process_limit: 1\n</code></pre> <p>[!TIP] Place this in a dedicated customization section in your YAML for easier maintenance, similar to this example.</p> <ol> <li> <p>Restart your host system, not just Home Assistant. Use the advanced options to Reboot system, which also restarts add-ons and can free up memory.</p> </li> <li> <p>Temporarily stop non-essential add-ons in Home Assistant, especially resource-intensive ones like Studio Code Server.</p> </li> <li> <p>Clean up build files.</p> </li> <li> <p>Try compiling again.</p> </li> <li> <p>After completion, restart your host system to reactivate the stopped add-ons.</p> </li> </ol>"},{"location":"esphome/#compile-using-your-computer","title":"Compile Using Your Computer","text":"<ol> <li> <p>Install ESPHome on your computer (Windows, Mac, or Linux) following this guide: Installing ESPHome Manually.</p> </li> <li> <p>With ESPHome installed locally, you can use the ESPHome Dashboard or the ESPHome Command Line Interface for compilation.</p> </li> </ol>"},{"location":"get_started/","title":"Getting Started with NSPanel HA Blueprint","text":"<p>Welcome to this setup guide, a community-driven approach to integrating NSPanel into your smart home. This guide is designed to be user-friendly, aiming to assist users who have a basic understanding of Home Assistant and ESPHome. While it's crafted to be accessible at all levels, a foundational knowledge in smart home automation will help you make the most of it.</p> <p>Whether you're taking your first steps in customizing your smart home or you're an enthusiast looking to further personalize your setup, this guide provides essential tools and instructions. Let\u2019s embark on this journey together to create a smart home that\u2019s uniquely yours.</p> <p>[!TIP] For troubleshooting TFT transfer issues, the most popular topic for new sers, please consult our TFT Transfer Troubleshooting Guide.</p> <p>[!NOTE] We encourage users with absolute beginner-level knowledge in Home Assistant, ESPHome, or YAML editing to familiarize themselves with the basics of these platforms. Our community is here to support, but please note that this guide may not cover the fundamental aspects of Home Assistant and ESPHome extensively.</p> <p>[!NOTE] Some images or instructions on this guide might be slighly different due to different configurations depending on your ESPHome and Home Assistant implementation or versions.</p> <p>If you find something that is not understandable or needs to be updated, please let us know. You can create an issue reporting this, or fix it yourself and submit a Pull Request to this repository.</p>"},{"location":"get_started/#summary","title":"Summary","text":"<ul> <li>Preparation</li> <li>ESPHome Firmware</li> <li>Preparing the ESPHome Environment</li> <li>Setting Up a Device on ESPHome Dashboard</li> <li>Flashing the Device for the First Time</li> <li>Integrating Your Panel to Home Assistant</li> <li>Making Changes Over The Air (OTA)</li> <li>Updating Your NSPanel Firmware</li> <li>Migrating from Other Custom Firmware</li> <li>Upload TFT</li> <li>Select the Right File</li> <li>Uploading to Nextion</li> <li>Troubleshooting TFT Transfer Issues</li> <li>Blueprint</li> <li>Importing the Blueprint</li> <li>Creating an Automation</li> <li>Editing Automation Settings</li> <li>How to Handle Multiple Panels</li> <li>Advanced Configuration for ESPHome and Home Assistant Experts</li> <li>Additional Tips and Resources</li> </ul>"},{"location":"get_started/#preparation","title":"Preparation","text":"<p>Start by ensuring you have all the necessary tools and files. This includes your NSPanel device, a stable internet connection, and access to your Home Assistant instance.</p> <p>If flashing it for the first time, please look for additional preparation and tools on the Flashing the device for the first time section later in this guide.</p>"},{"location":"get_started/#esphome-firmware","title":"ESPHome Firmware","text":""},{"location":"get_started/#preparing-the-esphome-environment","title":"Preparing the ESPHome Environment","text":"<p>To flash your NSPanel, ESPHome firmware is required. ESPHome can be integrated into your setup in various ways, including as a Home Assistant add-on or through a local installation on your computer. This guide is based on using the ESPHome dashboard, which is available in all standard implementations.</p> <ul> <li> <p>Installing ESPHome as a Home Assistant Add-On: For seamless integration with Home Assistant, ESPHome can be installed as an add-on. This method provides an easy-to-navigate interface and direct integration with your Home Assistant setup. For detailed instructions on this installation method, refer to Getting Started with ESPHome and Home Assistant.</p> </li> <li> <p>Manual Installation of ESPHome: A manual installation on your computer might be preferred if your Home Assistant's host is resource-limited and struggles with compiling ESPHome projects. Standalone installations on a normal computer typically offer faster and more efficient compiling. This method is ideal if you're working with a system that doesn't support Home Assistant add-ons or if you prefer a separate management environment for your ESPHome devices. Detailed steps for a manual installation can be found in the guide Installing ESPHome Manually.</p> </li> </ul>"},{"location":"get_started/#setting-up-a-device-on-esphome-dashboard","title":"Setting Up a Device on ESPHome Dashboard","text":"<p>Follow these steps to add a new device in the ESPHome Dashboard: 1. Click the + New Device button. 2. Enter a unique name for your new ESPHome device.  3. Select ESP32 as the device type.  4. Click Skip as we're not starting the installation yet.  5. Locate your newly created device in the ESPHome Dashboard and click Edit.  6. (Optional) For enhanced security, consider copying the <code>api:</code> section to a temporary file.  7. Note the device name at the beginning of the file under <code>esphome</code>.  8. Clear all existing content and paste the following YAML configuration:     <pre><code>substitutions:\n  # Settings - Editable values\n  device_name: \"YOUR_NSPANEL_NAME\" \n  wifi_ssid: !secret wifi_ssid\n  wifi_password: !secret wifi_password\n  nextion_update_url: \"http://homeassistant.local:8123/local/nspanel_eu.tft\"  # Optional for `esp-idf` framework\n  # Add-on configuration (if needed)\n  # heater_relay: \"1\"  # Possible values: \"1\" or \"2\"\n\n# Customization area\n##### My customization - Start #####\n##### My customization - End #####\n\n# Core and optional configurations\npackages:\n  remote_package:\n    url: https://github.com/Blackymas/NSPanel_HA_Blueprint\n    ref: main\n    files:\n      - nspanel_esphome.yaml # Core package\n      # Optional advanced and add-on configurations\n      # - advanced/esphome/nspanel_esphome_advanced.yaml\n      # - nspanel_esphome_addon_climate_cool.yaml\n      # - nspanel_esphome_addon_climate_heat.yaml\n      # - nspanel_esphome_addon_climate_dual.yaml\n    refresh: 300s\n\nesp32:\n  framework:\n    type: esp-idf\n</code></pre></p> <p> 9. Modify the Settings section with your device name (as noted in step 7) and Wi-Fi details.  10. For Wi-Fi credentials, use <code>!secret</code> for added security or input them directly. Learn about secrets in ESPHome: Home Assistant Secrets in ESPHome. 11. (Optionally when using <code>esp-idf</code>) Adjust <code>nextion_update_url</code> to the URL of a TFT file hosted on an HTTP or HTTPS server,     ensuring that the file is accessible to the NSPanel.     This URL will be used by ESPHome to download the TFT file to your panel.     For more information on hosting the TFT file and setting up the URL, see the Upload TFT section.</p> <pre><code>&gt; [!CAUTION]\n&gt; **Prefer HTTP over HTTPS for File Transfer**  \n&gt; While you might encounter examples using HTTPS in URLs for file transfer,\n&gt; it is strongly recommended to use HTTP, especially when employing the `arduino` framework.\n&gt; The support for HTTPS in this context can be unstable,\n&gt; often leading to issues with file transfers.\n</code></pre> <ol> <li> <p>(Optional) Enhance security with API encryption by adding the copied key from step 6 to the My Customization area.</p> <p>[!TIP] You can get a new randomly generated valid key from ESPHome Native API Component page.</p> </li> <li> <p>After finalizing settings, click Save and close the YAML window.</p> </li> </ol> <p>Your NSPanel is now configured in your ESPHome Dashboard.</p>"},{"location":"get_started/#flashing-the-device-for-the-first-time","title":"Flashing the Device for the First Time","text":""},{"location":"get_started/#drive-safe","title":"Drive Safe","text":"<p>[!CAUTION] Disconnect your panel's controller module from main power during all work. Operating on an open device that's plugged into the wall puts you at risk of electrocution.</p> <p>[!WARNING] You are solely responsible for your own safety. If you're uncomfortable or if something feels wrong, stop immediately.</p> <ul> <li>Use only electronic components rated for 3.3VDC. Ensure your TTL adapter is set to 3.3VDC. Exceeding this voltage can cause permanent damage to your panel.</li> <li>Maintain a clean work area to prevent damage to your device, especially the screen.</li> <li>Keep all small parts, like screws and cables, safely stored.</li> </ul>"},{"location":"get_started/#required-tools","title":"Required Tools","text":"<p>For first-time flashing of your NSPanel with ESPHome, you may need: 1. USB-to-Serial TTL adapter 2. Jumper wires 3. Breakable headers (optional) 4. Appropriate screwdriver to disassemble your panel's controller module (touch plate)</p>"},{"location":"get_started/#connecting-your-device-via-usb-to-serial-ttl-interface","title":"Connecting Your Device via USB-to-Serial TTL Interface","text":"<p>Before you begin disassembling your panel, it is recommended to review the following resources for guidance: - YouTube - Mark Watt Tech - HOW TO - Setup the SIMPLEST Smart Home Scene Controller - @blakadder's Sonoff NSPanel EU Switch in Detail - ESPHome - Physically Connecting to Your Device</p> <p>While this guide does not cover the firmware transfer process in detail, here are some important points to consider during the setup:</p> <p> </p> <ol> <li>Handle with care the pins connecting the front panel (which includes the main board and screen) to the back part (the section mounted to the wall). These pins are fragile and can break or bend, potentially rendering your panel nonfunctional.</li> <li>Ensure that the pin <code>IO0</code> on the panel's board is connected to the <code>GND</code> pin on the back part connectors. This connection is necessary to put the ESP32 into firmware transfer mode.</li> <li>Before connecting the TTL adapter to your panel's board, verify that the adapter is set to output 3.3VDC. Using a voltage higher than 3.3VDC, such as 5VDC, can damage your panel.</li> <li>To avoid short circuits, consider moving the panel's board away from the metal backing of the display. The use of a non-conductive tool, like the blue plastic one shown in the picture, can be helpful.</li> <li>Note the cross-connection of <code>RX</code> and <code>TX</code> pins.     The following pin-out should be used:            | Panel's Board | TTL USB-to-Serial |       | :--: | :--: |       | <code>3V3</code> | <code>VCC</code>, <code>3V3</code>, or <code>3.3V</code> |       | <code>TX</code>  | <code>RX</code>  |       | <code>RX</code>  | <code>TX</code>  |       | <code>GND</code> | <code>GND</code> |       | <code>IO0</code> | <code>GND</code>This can be connected to a <code>GND</code> pin on the panel's board. |     </li> </ol> <p>By following these guidelines and referring to the provided resources, you can safely prepare your NSPanel for firmware updates.</p>"},{"location":"get_started/#transferring-the-firmware-to-your-device","title":"Transferring the Firmware to Your Device","text":"<p>After ensuring your device is properly connected, proceed to update or install the firmware using the ESPHome Dashboard.</p> <ol> <li>Access the ESPHome Dashboard and locate your NSPanel device.</li> <li>Open the Installation Options: Click on the three-dot menu next to your device and select Install.</li> </ol> <p></p> <ol> <li>Choose the Installation Method:</li> <li>If you're updating your panel, the Wirelessly option is typically the right choice.    This method will compile and transfer the firmware directly to your panel over Wi-Fi.</li> <li> <p>For initial installations or updates via a USB-to-Serial TTL adapter, select either Plug into this computer or Manual download.    Both these options will compile the firmware and prompt you to download it to your computer.</p> </li> <li> <p>Transfer Firmware via USB-to-Serial TTL:</p> </li> <li>Navigate to ESPHome Web on your computer.</li> <li> <p>Click Connect and choose the serial interface connected to your USB-to-Serial TTL adapter.</p> <p></p> </li> <li> <p>Once connected, opt to install an existing firmware to your panel.    Select the compiled firmware file and initiate the installation.</p> </li> </ol> <p>The firmware installation process will take a few minutes. After completion, reassemble your panel and mount it back on the wall. Power it up, and it should appear online in the ESPHome Dashboard within a couple of minutes, running the latest firmware.</p>"},{"location":"get_started/#integrating-your-panel-to-home-assistant","title":"Integrating your panel to Home Assistant","text":"<p>Once your panel loaded the new ESPHome firmware, it should be automatically detected by Home Assistant and you should get a notification about that. If that isn't happnening, you can manually add it as a new intgration with the following steps:</p> <p>[!TIP] You can use this link to go directly to the dialog to add a new ESPHome device, then you can go directly to step 3.</p> <ol> <li>Go to your ESPHome integration's page under Settings &gt; Devices &amp; Services &gt; ESPHome.</li> <li>If your panel is automatically discovered, just click Configure, otherwise, click on Add device.</li> <li>Enter your new panel's hostname or IP address and click Next.</li> <li>Follow the instructions from your Home Assistant to add your new panel.</li> </ol> <p>After that, you will have access to the Device's page related to your NSPanel. On that page you will find all the entities published by the ESPHome firmware installed in your panel, which can be use to see it's status and control some of it's settings.</p> <p>It might take a minute or two until the device's page gets fully populated, but when that is completed, take a look around and get familiar with that page.</p> <p>You can always get back to the device's page under your ESPHome integration's page.</p>"},{"location":"get_started/#making-changes-over-the-air-ota","title":"Making Changes Over The Air (OTA)","text":"<p>Once your NSPanel is flashed with ESPHome, updating the firmware wirelessly via Over The Air (OTA) updates is a straightforward process. This method eliminates the need for a USB-to-serial TTL adapter for most firmware updates.</p>"},{"location":"get_started/#steps-for-ota-updates","title":"Steps for OTA Updates","text":"<ol> <li>After making your changes in the yaml editor, click the Install button located at the top of the editor. Alternatively, you can click the three-dot menu next to your device on the ESPHome Dashboard and select Install.</li> </ol> <ol> <li>A dialog box will appear with different installation options:</li> </ol> <ol> <li> <p>Choose the first option to transfer the firmware Wirelessly. ESPHome will compile the firmware with the new settings and automatically transfer it to your device via Wi-Fi.</p> </li> <li> <p>The compilation and transfer process may take a few minutes.</p> </li> <li>Once complete, your panel will restart automatically with the new firmware.</li> </ol> <p>Using OTA for firmware updates is a time-efficient way to keep your NSPanel updated with the latest changes and enhancements, ensuring a smooth and hassle-free user experience.</p>"},{"location":"get_started/#updating-your-nspanel-firmware","title":"Updating Your NSPanel Firmware","text":"<p>Regularly updating your NSPanel firmware ensures that you have the latest features and improvements from this project and ESPHome. To update your device's firmware to the latest version, simply follow the Steps for OTA Updates as outlined above.</p> <p>[!IMPORTANT] This project comprises three integral parts: ESPHome, the TFT file, and the Blueprint. It is crucial that all three components are updated to the same version to ensure compatibility and optimal performance. When updating the ESPHome firmware, make sure to also update the TFT file and the Blueprint to the corresponding version.</p> <p>Keeping each component of the NSPanel HA Blueprint in sync with the same version enhances the stability and functionality of your smart panel.</p>"},{"location":"get_started/#migrating-from-other-custom-firmware","title":"Migrating from other custom firmware","text":"<p>The installation in a NSPanel with Sonoff's original firmware should be straighforward, however, if you have installed some other custom firmware before, you may have additional steps to execute.</p>"},{"location":"get_started/#nspanel-lovelace-ui","title":"NSPanel Lovelace UI","text":"<p>If you have already installed on your NSPanel the \"nspanel-lovelace-ui\" firmware from @joBr99 or from Tasmota, an intermediate step is necessary. Please execute that first before returning here.</p>"},{"location":"get_started/#other","title":"Other","text":"<p>Please try the standard process and if you find any issue, please create a new issue and inform which custom firmware you have installed before migrating to NSPanel HA Blueprint.</p>"},{"location":"get_started/#upload-tft","title":"Upload TFT","text":"<p>The NSPanel utilizes a Nextion display, which is equipped with its own controller, memory, and firmware. This setup enables the display to render UI components and respond to commands sent from ESPHome. The firmware and UI elements for the Nextion display are compiled into a TFT file, which needs to be loaded onto the display for proper functionality.</p> <p>ESPHome manages the transfer of the TFT file to the Nextion display. It does this by connecting to an HTTP/HTTPS server, downloading the required TFT file, and then transferring it to the display. This process is crucial for updating or changing the UI and functionality of the display.</p> <p>In our GitHub repository, you can find all the necessary TFT files for this project, catering to different models of the NSPanel. These files are specifically designed to work with the various functionalities and features provided in each update of the NSPanel HA Blueprint.</p> <p>Make sure to select and upload the correct TFT file corresponding to your specific model of NSPanel to ensure smooth operation and access to all the latest features.</p> <p>[!TIP] For troubleshooting TFT transfer issues, consult our TFT Transfer Troubleshooting Guide.</p>"},{"location":"get_started/#select-the-right-file","title":"Select the right file","text":"<p>Open the device's page under ESPHome integration's page and look for Update TFT display and Update TFT display - Model under the Configuration area.</p> <p></p> <p>Expand the Update TFT display - Model control and find the model that better fits your panel:</p> <p></p> <p>The options are: - Use <code>nextion_update_url</code>: This will indicate ESPHome to download the TFT file from the URL you specified in your panel's yaml setting under the ESPHome dashboard and is typically used when your device have issues to transfer a TFT file directly from the GitHub repository or when you want to use a custom TFT file hosted in your local server. This is the default option and this keeps the compatibility with legacy installations when this was the only option. - NSPanel Blank: This is a very small TFT file which just shows a pre-formatted QR code on the screen with a link to the instructions. Although it's not a functional TFT for controlling your panel, it can be usefull when you have issues in your first TFT upload, as it will remove the Nextion Active Reparse Mode used when a Sonoff's TFT and also when some other custom implementations are installed. - NSPanel EU: This should be used when you are using a Sonoff NSPanel EU model. - NSPanel US: This should be used when you are using a Sonoff NSPanel US model installed on it's normal (portrait) position with the buttons bellow the screen. - NSPanel US Landscape: This should be used when you are using a Sonoff NSPanel US model installed on the landscape position with the buttons at the right side of the screen. - NSPanel EU (CJK languages): This should be used when you are using a Sonoff NSPanel EU model and want to use the CJK (Chinese/Japanese/Korean) languages. - NSPanel US (CJK languages): This should be used when you are using a Sonoff NSPanel US model installed on it's normal (portrait) position with the buttons bellow the screen, and want to use the CJK (Chinese/Japanese/Korean) languages. - NSPanel US Landscape (CJK languages): This should be used when you are using a Sonoff NSPanel US model installed on the landscape position with the buttons at the right side of the screen, and want to use the CJK (Chinese/Japanese/Korean) languages.</p>"},{"location":"get_started/#uploading-to-nextion","title":"Uploading to Nextion","text":"<p>Once the right model is selected, please press the button Update TFT display.</p> <p>In a few seconds your display should start transferring the file correspondent to the selected model. The transfer screen shows a progress bar with a percentage counter with a black background.</p> <p>If the transfer don't starts in a few seconds, ESPHome will retry automatically a few times, with different transfer parameters, so the transfer can take up to a minute to start.</p> <p>Once started, the transfer shouldn't take more than 10 to 20 minutes. If after this time it isn't close to finnish, please cancel the process by restarting your device, then try it again.</p> <p>[!TIP] For troubleshooting TFT transfer issues, consult our TFT Transfer Troubleshooting Guide.</p>"},{"location":"get_started/#troubleshooting-tft-transfer-issues","title":"Troubleshooting TFT transfer issues","text":"<p>We have an useful guide for troubleshooting TFT transfer issues. Please take a look there.</p>"},{"location":"get_started/#blueprint","title":"Blueprint","text":"<p>This section provides guidance on importing the NSPanel HA Blueprint from our GitHub repository into your Home Assistant, creating a new automation for your panel setup, and updating the blueprint when new versions are available. These processes are straightforward with the latest versions of Home Assistant. If you have any questions or need clarification, please reach out to us.</p>"},{"location":"get_started/#importing-the-blueprint","title":"Importing the Blueprint","text":"<p>Importing the blueprint into Home Assistant is a simple process. Just click the button below and follow the steps:</p> <p></p>"},{"location":"get_started/#creating-an-automation","title":"Creating an Automation","text":"<p>After importing the Blueprint into Home Assistant, create a new automation using these steps:</p> <ol> <li>Go to Settings \u2192 Automations &amp; Scenes \u2192 Blueprints in Home Assistant.</li> <li>Find the NSPanel Configuration Blueprint and click on it.</li> <li>In the Blueprint settings, select your panel in the NSPanel device field.</li> <li>Complete the relevant settings and click the Save button.</li> <li>Name your automation for easy identification and click Rename.    </li> </ol> <p>[!TIP] For a comprehensive list of panel settings, refer to the Blueprint Guide.</p>"},{"location":"get_started/#editing-automation-settings","title":"Editing Automation Settings","text":"<p>You can modify your automation anytime to change configurations:</p> <ol> <li> <p>In Home Assistant, go to Settings \u2192 Automations &amp; Scenes. Or use the link below.    </p> </li> <li> <p>Find your automation in the list and click on it to edit.</p> </li> <li> <p>After making changes, click Save. The new settings will be sent to your panel, usually within seconds. Some changes may require a page reload on the panel to appear.</p> </li> </ol> <p>[!TIP] For a comprehensive list of panel settings, refer to the Blueprint Guide.</p>"},{"location":"get_started/#how-to-handle-multiple-panels","title":"How to Handle Multiple Panels","text":"<p>For homes with multiple panels:</p> <ol> <li> <p>Repeat the steps in the \"Blueprint\" section for each panel.</p> </li> <li> <p>Ensure each panel has a unique entry in the ESPHome Dashboard and in Home Assistant under Settings \u2192 Devices &amp; Services \u2192 ESPHome.</p> </li> <li> <p>Create a separate automation for each panel in Home Assistant.</p> </li> </ol> <p>[!IMPORTANT] Avoid assigning the same panel to multiple automations. This can cause unexpected behavior and put extra load on Home Assistant and your Wi-Fi network. Currently, Home Assistant does not have a mechanism to prevent this.</p>"},{"location":"get_started/#advanced-configuration-for-esphome-and-home-assistant-experts","title":"Advanced Configuration for ESPHome and Home Assistant Experts","text":"<p>[!WARNING] Customizations and advanced mode are not supported by this project's team. Use them with caution and only if you have the necessary expertise.</p> <p>Before customizing your system, we encourage you to share any enhancements you make. Consider creating a Pull Request to the <code>dev</code> branch to share your discoveries with the community.</p>"},{"location":"get_started/#advanced-esphome-configuration","title":"Advanced ESPHome Configuration","text":"<p>For advanced customization with ESPHome, start with \"Customizations.\" We have a dedicated page for this, and your contributions are welcome: Customization.</p> <p>To use a local copy of <code>nspanel_esphome.yaml</code>, copy the file from GitHub to your local file system and include it in your ESPHome settings as follows:</p> <pre><code>substitutions:\n  # Editable settings\n  device_name: \"YOUR_NSPANEL_NAME\" \n  wifi_ssid: !secret wifi_ssid\n  wifi_password: !secret wifi_password\n  nextion_update_url: \"http://homeassistant.local:8123/local/nspanel_eu.tft\"\n  # Add-on configuration\n  # heater_relay: \"1\" - possible values: 1/2\n\n##### My customization - Start #####\n##### My customization - End #####\n\npackages:\n  local_package: !include packages/nspanel_esphome.yaml\n\nesp32:\n  framework:\n    type: esp-idf\n</code></pre> <p>[!NOTE] A sub-folder is recommended to prevent the file from being added as an additional device in the ESPHome dashboard. Alternatively, you can name the file starting with <code>.</code> to exclude it from the device list.</p>"},{"location":"get_started/#advanced-blueprint-configuration","title":"Advanced Blueprint Configuration","text":"<p>The Blueprint file <code>nspanel_blueprint.yaml</code> can be installed manually. You can also edit your local copy of the Blueprint, but be aware that reloading the Blueprint from the repository will overwrite local changes.</p>"},{"location":"get_started/#advanced-tft-file","title":"Advanced TFT File","text":"<p>All <code>.HMI</code> files used in this project are available in our GitHub repository. Modify these files using the Nextion Editor and create your own <code>.tft</code> files for your device.</p> <p>For guidance on using Nextion, refer to: - Nextion Instruction Set - Nextion Editor Guide</p>"},{"location":"get_started/#additional-tips-and-resources","title":"Additional Tips and Resources","text":"<p>[!TIP] For troubleshooting TFT transfer issues, consult our TFT Transfer Troubleshooting Guide first.</p> <p>If problems persist after troubleshooting, visit the Issues page. Feel free to create a new issue for personalized assistance, providing details such as: 1. A description or picture of what is displayed on your screen. 2. Information on whether you are updating from a previous version of this project, migrating from another NSPanel customization, or customizing a panel with the original Sonoff settings. 3. ESPHome logs from the start of your panel to the point where the upload fails. 4. A description of what you have already tried.</p>"},{"location":"get_started/#important-note","title":"Important Note","text":"<p>Remember, these instructions serve as a guideline and may vary based on your specific setup and any systems previously installed.</p>"},{"location":"howto/","title":"How-to","text":"<p>In this document, we collect important information, tips, and solutions related to various topics noticed over time. This is a community-driven resource, and we encourage everyone to contribute their knowledge.</p>"},{"location":"howto/#community-contribution","title":"Community Contribution","text":"<p>If you have a solution or tip to share, please contribute! Your knowledge can significantly help others in the community. You can write a short message with your findings, and we'll include it here.</p>"},{"location":"howto/#topics-and-solutions","title":"Topics and Solutions","text":"<p>Below are the topics covered in this document, each with relevant tips and solutions.</p> <ol> <li>How do I create \"Issues\" when I have a problem </li> <li>Update Blueprint</li> <li>Update ESPHome</li> <li>Update TFT</li> <li>Notification via HA</li> <li>Climate control with relays</li> <li>Call a page directly</li> <li>Play RTTTL Sound</li> <li>Start automations via Input_Boolean</li> <li>Updating Wi-Fi and OTA passwords in ESPHome with this project</li> </ol>"},{"location":"howto/#how-to-create-issues-when-i-have-a-problem","title":"How to create \"issues\" when I have a problem","text":"<p>To be able to solve your problem, it is important for us to have as much information as possible.</p> <ul> <li>Describe your problem as detailed as possible.</li> <li>Please write your ESPHome and Home Assistant version, as the version of files of this project (TFT, ESPHome and Blueprint).</li> <li>Please go to your automation and then to the \"3 dots\" and then to Edit as YAML. Copy the complete code and attach it to the ticket</li> <li>An important \"helper\" for solving problems is the trace of an automation. You can find the trace under Settings --&gt; Automations &amp; Scenes --&gt; your NSPanel automation --&gt; Traces (top right)</li> </ul> <p>[!NOTE] TRACES! Please execute again what does not work and open the trace immediately afterwards. Often you have to open the trace after the reboot too. During the start up, most things are loaded.</p> <p>[!IMPORTANT] In the trace you can see by the \"orange \" lines which way the automation has gone. Please tell us this path. Also, please take one or more screenshots and add them to your ticket. Especially important for us is where the \"Orange \" line ends, because most of the time this is also where the problem is.</p> <p>[!IMPORTANT] When you have opened the trace, there is a \"timestamp \" at the top. It is important that you select the correct timestamp.</p>"},{"location":"howto/#example-trace-after-reboot","title":"Example trace after reboot","text":""},{"location":"howto/#example-automations-blueprint","title":"Example automations Blueprint","text":"<pre><code>alias: YYXYYXYYX - NSPanel Configuration\ndescription: \"\"\nuse_blueprint:\n  path: nspanel_configuration.yaml\n  input:\n    nspanel_name: nspanel_dev\n    language: DE\n    sync_value_ha: select_no\n    sync_slider_ha: select_no\n    weather: AccuWeather\n    accuweather: home_wetter\n    outdoortemp: sensor.terrasse_garage_motion_sensor_temperature\n    humidity: sensor.kinderzimmer_lea_temperatur_sensor_humidity\n    hotwatertemp: sensor.hotwater_temp\n    hotwatercharge: switch.charge\n    heatingsystemflame: binary_sensor.flamestatus\n    climate: climate.nspanel_buro\n    left_button_entity: light.haustur_spot_2\n    right_button_entity: light.haustur_spot_1\n    entity01: light.buro_sideboard\n    entity01_name: Sideboard\n    entity02: cover.kuche_rollo\n    entity02_name: K\u00fcche Rollo\n    entity03: switch.buro_dart_beleuchtung\n    entity03_name: Dart Licht\n    delay: 2\n    right_button_name: Test 1\n    left_button_name: Test 2\n</code></pre>"},{"location":"howto/#update-blueprint","title":"Update Blueprint","text":"<p>[!IMPORTANT] To install a new version of the NSPanel, the Blueprint, ESPHome and the TFT must be updated!</p> <ol> <li>In Home Assistant, go to Settings &gt; Automation &amp; Scenes, select the tab Blueprints and find the blueprint named \"NSPanel Configuration\"</li> <li>Click the 3-dot menu and select \"Re-import blueprint\":   </li> <li>Click \"Re-import\" button:   </li> <li>Reload automations or restart Home Assistant.</li> <li>The new Blueprint is now available. Settings that have already been made are adopted.</li> <li>Please review the blueprint settings (under Automations tab) for new settings available with the new version.</li> </ol>"},{"location":"howto/#update-esphome","title":"Update ESPHome","text":"<p>[!IMPORTANT] To install a new version of the NSPanel, the Blueprint, ESPHome and the TFT must be updated!</p> <p>[!IMPORTANT] These instructions are for updating a panel where an older version of these files are already installed.</p> <p>These are the steps to flash your panel with an updated version from this project:</p> <ol> <li> <p>Go to the ESPHome dashboard (in your Home Assistant) and find the device you want to update.     Then click the 3-dot menu and select the option \"Clean Build Files\" to make sure you clean-up your system from the previous versions files:     </p> </li> <li> <p>When the clean-up process is done, click on Install button:     </p> </li> <li> <p>As your panel is probably already connected to the Wi-Fi, you may select to install Wirelessly,     as it is much easier and you don't have to unassemble your panel.     </p> </li> </ol> <p>The new firmware will be built and then flashed to your panel, which will restart at the end of this process and start sending logs again:</p> <p></p>"},{"location":"howto/#update-tft","title":"Update TFT","text":"<p>[!IMPORTANT] These instructions are for updating a panel where an older version of these files are already installed.</p> <p>The display can be updated via the UI:</p> <ol> <li>Go to Settings --&gt; Devices &amp; Services --&gt; Integrations , select the display under the ESPHome integration.</li> <li>Press the switch \"Update TFT Display\" under Configuration.</li> <li>The display starts the update process and then restarts.</li> </ol>"},{"location":"howto/#notification-via-ha","title":"Notification via HA","text":"<p>To show a notification on the NSPAnel, the following service call can be used:</p> <pre><code>service: esphome.panelname_notification_show\ndata:\n  label: Example text\n  text: Example text\n</code></pre> <p>To clear any notifications, the following service call can be used:</p> <pre><code>service: esphome.panelname_notification_clear\ndata: {}\n</code></pre> <p>To use the notifications in an automation, again simply use the service call as shown in the example below:</p> <pre><code>description: \"\"\nmode: single\ntrigger:\n  - platform: state\n    entity_id:\n      - binary_sensor.motion_detector\n    to: \"on\"\n    condition: []\n    action:\n  - service: esphome.panelname_notification_show\n    data:\n      label: Motion Detected\n      text: Example for a Notification on the Panel Screen\n</code></pre>"},{"location":"howto/#climate-control-with-relays","title":"Climate control with Relays","text":"<p>Attention!! Although these instructions are still valid, since v4.0 there is a better way to setup a climate control using the panel's relays an the add-on climate.</p> <p>In order to use the NSPanel to control a radiator or underfloor heating, at least one Generic Thermostat must be created in the HA. More information can be found here: https://www.home-assistant.io/integrations/generic_thermostat/</p> <p>Example configuration Generic Thermostat:</p> <pre><code>climate:\n  - platform: generic_thermostat\n    name: Study\n    heater: switch.study_heater ## Wenn das NSPanel Relays den Heizkreis Regler schaltet, kann dieses hier definiert werden\n    target_sensor: sensor.study_temperature ## Hier kann der NSPanel Sensor verwendet werden\n    min_temp: 15\n    max_temp: 21\n    ac_mode: false\n    target_temp: 17\n    cold_tolerance: 0.3\n    hot_tolerance: 0\n    min_cycle_duration:\n      seconds: 5\n    keep_alive:\n      minutes: 3\n    initial_hvac_mode: \"off\"\n    away_temp: 16\n    precision: 0.1\n</code></pre> <p>Afterwards, the climate.entity must be assigned accordingly in the panel configuration.</p>"},{"location":"howto/#call-a-page-directly","title":"Call a Page Directly","text":"<p>In user-created automations within Home Assistant, there are scenarios where you might want to automatically display a specific page on your device's screen. The following services enable this functionality:</p>"},{"location":"howto/#basic-pages","title":"Basic Pages","text":"<p>To open a specific page, you can utilize the <code>esphome.xxxxxx_send_command_printf</code> service. Here's an example that demonstrates how to open the <code>home</code> page:</p> <pre><code>service: esphome.xxxxx_send_command_printf\ndata:\n  cmd: page home\n</code></pre> <p>Currently, the following pages can be accessed using this method:</p> <ul> <li><code>buttonpage01</code></li> <li><code>buttonpage02</code></li> <li><code>buttonpage03</code></li> <li><code>buttonpage04</code></li> <li><code>entitypage01</code></li> <li><code>entitypage02</code></li> <li><code>entitypage03</code></li> <li><code>entitypage04</code></li> <li><code>home</code></li> <li><code>qrcode</code></li> <li><code>screensaver</code></li> </ul> <p>For instance, to directly navigate to button page 2, replace <code>home</code> in the command with <code>buttonpage02</code>:</p> <pre><code>service: esphome.xxxxx_send_command_printf\ndata:\n  cmd: page buttonpage02\n</code></pre>"},{"location":"howto/#entity-specific-pages","title":"Entity-Specific Pages","text":"<p>For entity-specific pages, a more detailed call is required as it involves specifying the entity. You can use the service <code>esphome.xxxxx_open_entity_settings_page</code> as shown in the following example:</p> <pre><code>service: esphome.xxxxx_open_entity_settings_page\ndata:\n  page: climate\n  page_label: My thermostat\n  page_icon: \\uE237\n  page_icon_color:\n    - 255\n    - 0\n    - 0\n  entity: climate.my_thermostat\n  back_page: home\n</code></pre> <p>The required parameters for this service are as follows:</p> <ul> <li>page: The page to be opened, typically the same as the domain of the entity (e.g., <code>climate</code>, <code>cover</code>, <code>light</code>).</li> <li>page_label: The title of the page, usually the friendly name of the entity.</li> <li>page_icon: The UTF-8 code for the icon to be displayed at the top left of the page. Supported icons are listed on the HASwitchPlate Material Design Icons page. The code is a 4-character hex string found near the icon in the list. Prefix the icon code with <code>\\u</code> to indicate it's a UTF-8 hex code.</li> <li>page_icon_color: An RGB array with values from 0 to 255 for red, green, and blue. ESPHome automatically converts this array to a 16-bit RGB (RGB565) format, which may lead to some color distortion.</li> <li>entity: The <code>entity_id</code> from Home Assistant for the relevant entity.</li> <li>back_page: The page to return to when the detailed page is manually closed or after a page timeout. Only Basic pages are supported.</li> </ul>"},{"location":"howto/#notification-page","title":"Notification Page","text":"<p>To display the notification page, use the <code>esphome.xxxxx_notification_show</code> service as shown below:</p> <pre><code>service: esphome.xxxxx_notification_show\ndata:\n  label: \"Notification title\"\n  message: \"Attention! This is a placeholder for your notification message.\"\n</code></pre>"},{"location":"howto/#wake-up-page","title":"Wake-up Page","text":"<p>You may have configured a specific Wake-up page on your device. This page is automatically displayed after the device boots up or wakes up from sleep mode (such as the <code>screensaver</code> page). To open this page, you have two options:</p> <ol> <li>Directly call the page if it is one of the Basic pages.</li> <li>Use the <code>esphome.xxxxx_wake_up</code> service as follows:</li> </ol> <pre><code>service: esphome.xxxxx_wake_up\ndata:\n  reset_timer: true\n</code></pre> <pre><code>The `reset_timer` parameter allows you to control the **Timeout sleep timer**.\nSetting it to `true` resets the timer, while `false` continues counting down from the current value.\n</code></pre> <p>The Wake-up service differs from a normal page call in that it only opens the wake-up page if the panel is in sleep mode. If the panel is already active, the current page remains displayed. This feature is particularly useful in conjunction with a motion sensor to wake up your panel automatically. By repeatedly calling this service whenever motion is detected, the panel can be either woken up or have its sleep timeout timer reset (if <code>reset_timer</code> is set to <code>true</code>).</p>"},{"location":"howto/#play-rtttl-sound","title":"Play RTTTL Sound","text":"<p>HA can send a RTTTL to the NSPanel, custom melodies are possible.</p> <p>The use this function, the following service is called: nspanel_play_rtttl </p> <p>You can find many RTTTL strings on the web, the important thing is that they must start with the name and then a colon.</p> <p>Here is an example:</p> <pre><code>The Simpsons:d=4,o=5,b=160:c.6,e6,f#6,8a6,g.6,e6,c6,8a,8f#,8f#,8f#,2g,8p,8p,8f#,8f#,8f#,8g,a#.,8c6,8c6,8c6,c6\n</code></pre> <p></p> <p>More information: https://esphome.io/components/rtttl.html#common-beeps</p> <p>More songs: https://codebender.cc/sketch:109888#RTTTL%20Songs.ino</p>"},{"location":"howto/#start-automations-via-input_boolean","title":"Start Automations via Input_Boolean","text":"<p>Although the NSPanel can execute scripts directly over the buttons, there is also the possibility of starting automations directly by the means of Input_Boolean.</p> <p>For this, a helper must first be created under Settings --&gt; Devices&amp;Services --&gt; Helpers</p> <p>Now add the created Input_Boolean as a trigger in the desired automation under State.</p> <p>In the last step, assign the trigger to a button in the Panel Config.</p>"},{"location":"howto/#updating-wi-fi-settings-and-ota-passwords-in-esphome-with-this-project","title":"Updating Wi-Fi settings and OTA Passwords in ESPHome with This Project","text":""},{"location":"howto/#overview","title":"Overview","text":"<p>When you update your Wi-Fi password in a device with firmware from our project, it's important to remember that the <code>wifi_password</code> substitution is used for both Wi-Fi and OTA updates (and a few more places that are not relevant now). Failing to update both simultaneously can lead to connection issues.</p>"},{"location":"howto/#step-by-step-guide","title":"Step-by-Step Guide","text":"<ol> <li>Prepare Your Device for Update</li> <li> <p>Ensure your device is connected to your computer and is accessible via your current Wi-Fi network.</p> </li> <li> <p>Update OTA Password First</p> </li> <li>Open your panel's YAML.</li> <li> <p>Add the following in the customization area:</p> <pre><code>esphome:\n  on_boot:\n    - priority: 600\n      then:\n        - lambda: |-\n            id(my_ota).set_auth_password(\"Your new Wi-Fi password\");\nota:\n  password: \"Your current Wi-Fi password\"\n  id: my_ota\n</code></pre> </li> <li> <p>Flash your device. It will use the current password for this flash and will inform your device to start using the new password for the next OTA.</p> </li> <li>When your device starts, remove the lines above.</li> <li>Find the <code>wifi_ssid</code> and <code>wifi_password</code> key in the <code>substitutions</code> area (usually at the beginning of the file) and change it to your new Wi-Fi password.     If that is point to <code>!secret</code>, you will have to edit it in your <code>secrets.yaml</code> file instead.</li> <li> <p>Flash your device again with the updated YAML. It will use the current Wi-Fi to connect to your device and the new Wi-Fi password as the OTA password, then will inform your device to connect to the Wi-Fi with the new settings.</p> </li> <li> <p>Update Wi-Fi Settings in Your Access Point</p> </li> </ol>"},{"location":"howto/#important-notes","title":"Important Notes","text":"<ul> <li>The device will still be using the old Wi-Fi settings for this update. If you've already changed your Wi-Fi network settings, this step will fail.</li> <li>Troubleshooting: Unable to Connect via Wi-Fi</li> <li>If your device cannot connect to Wi-Fi due to a password or SSID change, you will need to flash the device via a serial connection.</li> <li>Connect your device to your computer using a USB-to-Serial adapter.</li> <li>Use the ESPHome flasher tool to upload the new configuration.</li> <li>In this case, don't worry about the OTA password, as it's not required when flashing via serial.</li> </ul>"},{"location":"howto/#verify-the-update","title":"Verify the Update","text":"<ul> <li>Once the new configuration is uploaded, your device should automatically connect to your Wi-Fi network with the new settings.</li> <li>Verify that OTA updates are working with the new password.</li> </ul>"},{"location":"howto/#additional-tips","title":"Additional Tips","text":"<ul> <li>Backup Your Configuration: Always keep a backup of your ESPHome configuration files.</li> <li>Network Accessibility: Ensure your device remains within your Wi-Fi network's range during the update process.</li> <li>Serial Flashing: Familiarize yourself with the process of flashing via serial, as it's a reliable fallback method.</li> </ul>"},{"location":"howto/#conclusion","title":"Conclusion","text":"<p>By carefully updating both your Wi-Fi settings and OTA passwords in your ESPHome configuration, you can avoid connection issues. Remember to always back up your configuration and be prepared to use a serial connection if Wi-Fi connectivity is lost.</p>"},{"location":"lovelace_ui/","title":"Migrating from NsPanel Lovelace UI","text":"<p>This document applies to users trying to migrate from NsPanel Lovelace UI, which is another customization for NSPanel which is available for Tasmota or ESPHome.</p> <p>If you are coming from there, you have to chose one of the 3 options:</p> <ul> <li>Upload TFT using NsPanel Lovelace UI tools - ESPHome version</li> <li>Upload TFT using NsPanel Lovelace UI tools - Tasmota version</li> <li>Upload TFT using this project's tools</li> </ul>"},{"location":"lovelace_ui/#updating-tft","title":"Updating TFT","text":""},{"location":"lovelace_ui/#common-steps","title":"Common steps","text":"<ol> <li>Download the file <code>nspanel_blank.tft</code> from our GitHub repository.</li> <li>Upload the same file (<code>nspanel_blank.tft</code>) to the folder \"www\" in your Home Assistant</li> <li>Double check if the file is available by trying to download it using your local url (typically <code>http://homeassistant.local:8123/local/nspanel_blank.tft</code>).</li> </ol>"},{"location":"lovelace_ui/#upload-tft-using-nspanel-lovelace-ui-tools-esphome-version","title":"Upload TFT using NsPanel Lovelace UI tools - ESPHome version","text":"<p>After following the Common steps, follow the additional steps:</p> <ol> <li>On Home Assistant, go to \"Developer tools --&gt; Services\" and search there for the service named \"ESPHome: DEVICE_NAME_upload_tft\" or <code>esphome.&lt;&lt;device_name&gt;&gt;_upload_tft</code>.</li> <li>On the field <code>URL</code>, enter the url for your local <code>nspanel_blank.tft</code> file (typically <code>http://homeassistant.local:8123/local/nspanel_blank.tft</code>).</li> <li>Press the button CALL SERVICE</li> </ol> <p>If everything goes right, you will see the progress bar indicating the file transfer an you will end up with a black screen showing a QR code. Then please follow the instructions from here.</p>"},{"location":"lovelace_ui/#upload-tft-using-nspanel-lovelace-ui-tools-tasmota-version","title":"Upload TFT using NsPanel Lovelace UI tools - Tasmota version","text":"<p>After following the Common steps, use the instructions from NsPanel Lovelace UI - Flash Firmware to Nextion Screen website to upload TFT, just replacing the file url by the one you have locally (typically <code>http://homeassistant.local:8123/local/nspanel_blank.tft</code>).</p> <p>If everything goes right, you will see the progress bar indicating the file transfer an you will end up with a black screen showing a QR code. Then please follow the instructions from here.</p>"},{"location":"lovelace_ui/#upload-tft-using-this-projects-tools","title":"Upload TFT using this project's tools","text":"<p>If you have already installed the ESPHome firmware from this project, this is probably your better option now.</p> <p>After following the Common steps, follow the additional steps:</p> <ol> <li> <p>On your panel's screen showing a ring and a message \"Wait for content...\", click 9 times in the center of the ring.</p> <p> 2. You should get to this page:</p> <p> 3. Click on the button \"disable recmod\" 4. Click on the button \"bauds=115200\" 5. On Home Assistant, go to \"Developer tools --&gt; Services\" and search there for the service named \"ESPHome: DEVICE_NAME_upload_tft\" or <code>esphome.&lt;&lt;device_name&gt;&gt;_upload_tft</code>. 6. On the field <code>URL</code>, enter the url for your local <code>nspanel_blank.tft</code> file (typically <code>http://homeassistant.local:8123/local/nspanel_blank.tft</code>). 7. Press the button CALL SERVICE</p> </li> </ol> <p>If everything goes right, you will see the progress bar indicating the file transfer an you will end up with a black screen showing a QR code. Then please follow the instructions from here.</p>"},{"location":"lovelace_ui/#additional-tips-and-resources","title":"Additional Tips and Resources","text":"<p>We have an useful guide for troubleshooting TFT transfer issues. Please take a look there first.</p> <p>After troubleshooting, if issues persist, consult the Issues and feel free to create a new one asking for more personalized assistance.</p> <p>Please share as much info as possible, like: 1. Describing (or a picture of) what is in your screen 2. Are updating from a previous version of this same project, or coming from another NSPanel customization (which one?) or customizing for the first time a panel with original Sonoff settings? 3. Please share the ESPHome logs from when your panel starts to the moment the upload fails. 4. Describe what you have already tried.</p>"},{"location":"lovelace_ui/#important-note","title":"Important note","text":"<p>Remember, these steps are a guideline and might vary slightly based on your specific setup and previously installed system.</p>"},{"location":"nspanel_blank/","title":"<code>nspanel_blank.tft</code>","text":"<p>The NSPanel consist in a ESP32 board (the panel itself, controlling the relays, buttons, communications, etc.) with a Nextion display connected to.</p> <p>This Nextion display have an independent controller which also requires a firmware and its settings (the basic layout), and this is done by an <code>.tft</code> file.</p> <p>When you get your panel from Sonoff, their <code>tft</code> file is installed in the Nextion display and using a called \"Reparse mode\", which makes a bit challenging to replace the <code>tft</code> file when using ESPHome and then, we highly recoment you using <code>nspanel_blank.tft</code>, which is just a fraction of the size of a regular <code>tft</code> and will make the first <code>tft</code> replacement much easier.</p> <p>Once NSPanel's original <code>tft</code> is replaced, is much easier to install a new <code>tft</code> with ESPHome, so you can go directly to the final file (either <code>nspanel_eu.tft</code>, <code>nspanel_us.tft</code> or <code>nspanel_us_land.tft</code>).</p> <p>For more datails on how to install the first <code>tft</code> file, specially if your panel still displaying the original Sonoff screen, please refeer to the Troubleshooting TFT transfer guide.</p>"},{"location":"nspanel_blank/#how-to-install-a-different-tft-file","title":"How to install a different <code>tft</code> file?","text":"<p>v4.2 or later and <code>esp-idf</code> framework:</p> <p>Just go to your devices's page (under Settings &gt; Devices and Services &gt; ESPHome), select your Upload TFT display - Model and then press Upload TFT display.</p> <p>Older versions or <code>arduino</code> framework:</p> <p>On your ESPHome settings, you have entered a url for <code>nextion_update_url</code>, in the substitutions, like this:</p> <pre><code>substitutions:\n  ###### CHANGE ME START ######\n  device_name: \"YOUR_NSPANEL_NAME\" \n  wifi_ssid: !secret wifi_ssid\n  wifi_password: !secret wifi_password\n\n  nextion_update_url: \"http://homeassistant.local:8123/local/nspanel_eu.tft\"\n  nextion_blank_url: \"http://homeassistant.local:8123/local/nspanel_blank.tft\"\n\n  ##### addon-configuration #####\n  ## addon_climate ##\n  # addon_climate_heater_relay: \"1\" # possible values: 1/2\n\n  ##### CHANGE ME END #####\n\npackages:\n  remote_package:\n    url: https://github.com/Blackymas/NSPanel_HA_Blueprint\n    ref: main\n    files:\n      - nspanel_esphome.yaml # Core package\n      # - nspanel_esphome_addon_climate_cool.yaml # activate for local climate (cooling) control\n      # - nspanel_esphome_addon_climate_heat.yaml # activate for local climate (heater) control\n      # - nspanel_esphome_addon_climate_dual.yaml # activate for local climate (dual) control\n    refresh: 300s\n\nesp32:\n  framework:\n    type: esp-idf\n</code></pre> <p>This url will indicate where your panel will look for the <code>tft</code> file when you click the \"Upload TFT\" button (under device's page) or call the service <code>esphome.xxxxx_upload_tft</code>.</p> <p>The most popular way to switch between the <code>nspanel_blank.tft</code> and <code>nspanel_xx.tft</code> is replacing the URL on the ESPHome settings and flashing the device again, however, you can also do this calling the service <code>esphome.xxxxx_upload_tft_url</code> adding the URL of the alternative file as a parameter. It's up to you, as both ways will give the same result.</p>"},{"location":"nspanel_blank/#what-to-do-after-installing-nspanel_blanktft","title":"What to do after installing <code>nspanel_blank.tft</code>?","text":"<p>Once you have sucessfully installed any of the <code>tft</code> files from this project, the <code>nspanel_blank.tft</code> file shouldn't be necessary anymore and you should be able to always install the final <code>tft</code> file.</p> <p>v4.2 or later and <code>esp-idf</code> framework:</p> <p>Just go to your devices's page (under Settings &gt; Devices and Services &gt; ESPHome), select your Upload TFT display - Model and then press Upload TFT display.</p> <p>Older versions or <code>arduino</code> framework:</p> <p>Make sure you have one of the following final TFT files in your local http server (typically Home Assistant on www folder): - <code>nspanel_eu.tft</code> - <code>nspanel_us.tft</code> - <code>nspanel_us_land.tft</code></p> <p>Now Flash your panel with <code>nextion_update_url</code> pointing to one of the final TFT files and press Upload TFT in the device's page (Settings &gt; Devices &amp; Services &gt; ESPHome).</p>"},{"location":"nspanel_blank/#additional-tips-and-resources","title":"Additional Tips and Resources","text":"<p>We have an useful guide for troubleshooting TFT transfer issues. Please take a look there first.</p> <p>After troubleshooting, if issues persist, consult the Issues and feel free to create a new one asking for more personalized assistance.</p> <p>Please share as much info as possible, like: 1. Describing (or a picture of) what is in your screen 2. Are updating from a previous version of this same project, or coming from another NSPanel customization (which one?) or customizing for the first time a panel with original Sonoff settings? 3. Please share the ESPHome logs from when your panel starts to the moment the upload fails. 4. Describe what you have already tried.</p>"},{"location":"nspanel_blank/#important-note","title":"Important note","text":"<p>Remember, these steps are a guideline and might vary slightly based on your specific setup and previously installed system.</p>"},{"location":"tft_upload/","title":"Troubleshooting TFT transfer","text":"<p>[!IMPORTANT] If you have already installed the version \"nspanel-lovelace-ui\" from joBr99 on your NSPanel, an intermediate step is necessary - otherwise, it is not possible to install this or any other version.</p> <p>See Common Issues | TFT Upload when NSPanel Lovelace UI has been installed</p>"},{"location":"tft_upload/#common-issues-and-troubleshooting","title":"Common Issues and Troubleshooting","text":"<p>The following is a list of common issues affecting the TFT upload, along with suggested solutions. These issues are not specific to the NSPanel HA Blueprint project but are common to Nextion displays and ESPHome.</p>"},{"location":"tft_upload/#resolving-system-data-error-on-display","title":"Resolving \"System data ERROR!\" on Display","text":""},{"location":"tft_upload/#dont-panic","title":"Don't Panic!","text":"<p>The \"System data ERROR!\" message, sometimes displayed upside-down, appears when a TFT upload is incomplete. While it may seem alarming, this message simply indicates that the TFT file on the display is invalid. A successful TFT upload will resolve this issue.</p>"},{"location":"tft_upload/#resolving-model-does-not-match-on-display","title":"Resolving \"Model does not match\" on Display","text":"<p>This is one more case where the message sounds more alarming than it actually is. Often, a simple reboot of the panel is enough to restore the previous TFT file. This issue typically arises from a corrupt TFT file or server response issues. For troubleshooting, refer to the following sections: - Using a Local Source (Home Assistant) - HTTP Instead of HTTPS - Especially important when using the <code>arduino</code> framework. - Check the File Size by Downloading to Your Computer</p> <p>[!TIP] If the TFT transfer has started, your panel might not respond to the reset button on the device's page in Home Assistant or to holding the hardware button for 15 seconds. In such cases, you can either power cycle your device using the room's relay on your electrical plate or use a pin to press the hardware restart button in a small hole behind the device. </p>"},{"location":"tft_upload/#using-the-nspanel_blanktft-file-to-assist","title":"Using the <code>nspanel_blank.tft</code> File to Assist","text":"<p>Many TFT upload problems are associated with the Nextion Active Reparse Mode, which is used in some implementations like the original Sonoff firmware or other popular custom firmwares. Installing any TFT file from this project will disable this mode. However, the size of a typical TFT file (7 to 12 Mb) can be challenging for devices with limited memory, such as the ESP32 in your panel, especially over a serial interface.</p> <p>To facilitate the process, we've created the <code>nspanel_blank.tft</code> file. Although it's not a fully functional TFT file, it's sufficient to disable the Reparse Mode and is significantly smaller (less than 300kb). </p> <p>If you encounter any issues, try installing the <code>nspanel_blank.tft</code> file first. This should make it easier to subsequently install larger, fully functional TFT files.</p>"},{"location":"tft_upload/#enabling-tft-upload-components","title":"Enabling TFT upload components","text":"<p>If the components necessary for uploading a TFT file are not available in the device's page under Settings &gt; Devices &amp; Services &gt; ESPHome, and you cannot simply enable the entity on it's settings, please try removing the device integration from there, restart your Home Assistant instance and then add the device again. It should be automatically detected as a new integration, but if this is not happening, click the Add integration button, select ESPHome, add the device hostname or IP address and follow the steps required.</p>"},{"location":"tft_upload/#wait-a-bit-before-starting-the-tft-upload","title":"Wait a Bit Before Starting the TFT Upload","text":"<ul> <li>Issue: The Nextion display might not connect to ESPHome immediately after boot.</li> <li>Solution: Wait up to 2 minutes for the boot script to complete. If you are already using a TFT from this project, the display of ESPHome version and the framework used (<code>arduino</code> vs <code>esp-idf</code>) is an indication that a communication was established. If you haven't installed any TFT yet, look for Nextion related messages on ESPHome logs.</li> <li>Additional Guidance: Knowing when the device is fully booted and ready to accept the TFT upload can prevent many issues. Observe any changes in the display or logs indicators to ensure the device is ready.</li> </ul>"},{"location":"tft_upload/#consider-changing-the-framework","title":"Consider changing the framework","text":"<ul> <li>Issue: You might be facing some situation where the transfer engine used by your framework cannot handle it properly.</li> <li>Solution: Temporarily switch between the frameworks.</li> <li>Additional Guidance: This project supports both <code>arduino</code> (ESPHome default) or <code>esp-idf</code> frameworks. Those have totally independently upload TFT engines, so changing the framework may cause a significant change. In our experience, <code>esp-idf</code> have a better memory management and therefore is more efficient with uploading TFT. In addition to that, <code>esp-idf</code> supports HTTPS and even the download directly from GitHub, which is not indicated with <code>arduino</code>.</li> </ul> <p>You can set the framework you want by adding this to your ESPHome yaml:</p>"},{"location":"tft_upload/#esp-idf","title":"ESP-IDF","text":"<pre><code>esp32:\n  framework:\n    type: esp-idf\n</code></pre>"},{"location":"tft_upload/#arduino","title":"Arduino","text":"<pre><code>esp32:\n  framework:\n    type: arduino\n</code></pre>"},{"location":"tft_upload/#using-a-local-source-home-assistant","title":"Using a Local Source (Home Assistant)","text":"<ul> <li>Issue: Problems with downloading the TFT from GitHub.</li> <li>Solution: Host the TFT file on your Home Assistant and change the <code>nextion_update_url</code> accordingly.</li> <li>Step-by-Step Guide: Here's how you can change your <code>nextion_update_url</code>:<ol> <li>Locate your panel's ESPHome configuration file.</li> <li>Find the line with <code>nextion_update_url</code>.</li> <li>Replace the URL with the local address where your TFT file is hosted.</li> </ol> </li> </ul>"},{"location":"tft_upload/#http-instead-of-https","title":"HTTP Instead of HTTPS","text":"<ul> <li>Issue: HTTPS connections may be problematic with ESP, especially when using <code>arduino</code> as framework.</li> <li>Solution: Use HTTP for hosting the TFT file and updating the <code>nextion_update_url</code>.</li> <li>Why HTTP?: HTTP can be more stable for these connections. To switch, simply replace 'https' with 'http' in your URLs and make sure your http server supports non-secure connections.</li> </ul>"},{"location":"tft_upload/#remove-customizations","title":"Remove Customizations","text":"<ul> <li>Issue: Customizations like <code>bluetooth_proxy</code> and <code>ble_tracker</code> may interfere with the upload.</li> <li>Solution: Temporarily remove any customizations to free up memory.</li> <li>How to Remove Customizations: Identify any additional features you've added and remove them from your configuration file. Pay special attention to memory-intensive customizations.</li> </ul>"},{"location":"tft_upload/#use-ip-address-instead-of-dns","title":"Use IP Address Instead of DNS","text":"<ul> <li>Issue: DNS may cause connection problems.</li> <li>Solution: Use the IP address of your Home Assistant directly.</li> <li>Example: Replace <code>http://homeassistant.local:8123/local/nspanel_blank.tft</code> with <code>http://192.168.0.100:8123/local/nspanel_blank.tft</code>.</li> </ul>"},{"location":"tft_upload/#check-the-file-size-by-downloading-to-your-computer","title":"Check the File Size by Downloading to Your Computer","text":"<ul> <li>Issue: Ensuring the file size matches the GitHub version.</li> <li>Solution: Use the same URL you provided to ESPHome to download the file on your computer and compare sizes.</li> <li>Verification Steps: Download the file, then right-click and select 'Properties' to check the size. Compare this with the size listed on GitHub or from the file you downlodaded directly from GitHub.</li> </ul>"},{"location":"tft_upload/#power-cycle-your-panel","title":"Power Cycle Your Panel","text":"<ul> <li>Issue: General troubleshooting.</li> <li>Solution: Turn off the power supply, wait for a moment, and then power it back on. If your panel is already installed in the wall, you can often power cycle it by switching the relay connected to your panel in your electricity relay's panel.</li> <li>How Long to Wait: It's recommended to wait at least 30 seconds before turning the power back on. This duration helps ensure that the system resets to a clean state.</li> </ul> <p>[!TIP] If you don't have easy access to your relay's panel, an alternative is to use a pin to press the hardware restart button, located in a small hole behind the device. Although this action does not replicate a full power cycle, it might resolve the issue in some cases. </p>"},{"location":"tft_upload/#flash-your-panel-again","title":"Flash your panel again","text":"<ul> <li>Issue: Your firmware might be missing some important library, you may be using an outdated version or the ESP may be out of memory.</li> <li>Solution: Remove all add-ons and non-essential customization and flash your panel again.</li> <li>Step-by-Step Guide:<ol> <li>Look your yaml file and commment out all the customization (typically on a section name \"My customizations\") and any of the remote files other than <code>nspanel_esphome.yaml</code>.</li> <li>Flash your panel with the new cleaner yaml. You can do this over the air/wirelessly, although it is recommended to use serial when changing between frameworks</li> <li>Try to update the TFT file again</li> <li>Add the add-ons and removed customization back and then flash it again.</li> </ol> </li> </ul>"},{"location":"tft_upload/#try-an-alternative-http-service","title":"Try an alternative http service","text":"<ul> <li>Issue: Your current http server may be overloaded.</li> <li>Solution: Try another http server installed in your computer. There are many options available for free to run under you local Windows, MAC or Linux machine.</li> <li>Examples: Just to name some:   | Solution | Website | Supported OSs | Pros | Cons |   |----------|---------|---------------|------|------|   | NGINX | nginx.org | Linux, Windows, macOS | High performance, efficient for static content, good for high concurrency | Configuration can be complex for beginners |   | IIS | Microsoft Web Platform | Windows | Integrated with Windows, GUI for setup, good for Windows environments | Limited to Windows OS |   | Apache | httpd.apache.org | Linux, Windows, macOS | Highly reliable and flexible, wide OS compatibility, extensive customization | Can be less efficient under high load than NGINX |   | XAMPP | apachefriends.org | Linux, Windows, macOS | All-in-one package, easy to install, ideal for beginners | Not optimized for high-traffic sites, more suited for development than production |</li> </ul>"},{"location":"tft_upload/#additional-tips-and-resources","title":"Additional Tips and Resources","text":"<p>After troubleshooting, if issues persist, consult the Issues and feel free to create a new one asking for more personalized assistance.</p> <p>Please share as much info as possible, like: 1. Describing (or a picture of) what is in your screen 2. Are updating from a previous version of this same project, or coming from another NSPanel customization (which one?) or customizing for the first time a panel with original Sonoff settings? 3. Please share the ESPHome logs from when your panel starts to the moment the upload fails. 4. Describe what you have already tried.</p>"},{"location":"tft_upload/#important-note","title":"Important note","text":"<p>Remember, these steps are a guideline and might vary slightly based on your specific setup and previously installed system.</p>"},{"location":"weather/","title":"Weather support","text":""},{"location":"weather/#expected-configuration","title":"Expected configuration","text":""},{"location":"weather/#in-home-assistant-automation","title":"In Home Assistant Automation","text":"<p>The integration should be Accuweather and you weather entity selected </p>"},{"location":"weather/#enable-accuweather-forcasts","title":"Enable Accuweather forcasts","text":""},{"location":"weather/#confirm-source-in-developer-tools-states","title":"Confirm source in Developer Tools States","text":"<p>In developer tools the weather entity should have the attribute 'attribution: Data provided by AccuWeather' </p>"},{"location":"weather/#if-you-are-still-having-issues","title":"If you are still having issues","text":"<p>Its likely you weather integrations are clashing. A method we have found to resolve this is to delete ALL weather integrations and just re-add Accuweather. Be aware you will lose your existing weather integrations and any associated data / entities.</p> <ol> <li>Delete the Standard and AccuWeather integrations</li> <li>Add Accuweather &amp; Enable forcasts</li> <li>Set the Weather entity in the Automation</li> </ol>"}]}